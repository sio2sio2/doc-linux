.. _seg-acceso:

******************
Control de accesos
******************
Vetar el acceso a personas no autorizadas garantiza que evitemos dos amenazas:

+ El vandalismo.
+ El robo de datos.

Ahora bien, el acceso puede ser de dos tipos:

+ Acceso físico.
+ Acceso lógico.

El epígrafe está dedicado al análisis del control de ambos accesos.

Acceso físico
*************
El control del acceso físico es fundamental para salvaguardar la integridad y
el funcionamiento del sistema, no ya sólo para evitar accesos malintencionados
sino para evitar que personal poco cualificado pueda provocar involuntariamente
algún problema. Este control se materializa tanto en la vigilancia como en la
restricción al paso.

Vigilancia
==========
La *vigilancia* permite monitorizar cualquier intento de acceso y se
materializa en:

- Alarmas.
- Cámaras de vigilancia.
- Personal de vigilancia.

La vigilancia puede o no desencadenar una respuesta de restricción al paso. Por
ejemplo, un vigilante al cargo de una cámara puede actuar si ésta detecta la
presencia de alguien sospechoso.

En el caso particular de las cámaras de vigilancia, cuando se pretendía
desencadenar una respuesta y no sólo simplemente registro, estas
tradicionalmente se conectaban a un circuito cerrado de televisión lo que
obligaba a que el personal de vigilancia se encontrara en el propio edificio. La
situación ha cambiado, sin embargo, con la aparición de las cámaras |IP| que
permiten retransmitir a través de la red las imágenes.

Restricción al paso
===================
Las restricciones al paso suponen vetar el acceso al espacio físico del servidor
a toda persona no autorizada. Puede conseguirse a través:

**Personal de vigilancia**
   esto es, personal humano que controla qué solo acceda al espacio reservado el
   personal autorizado.

**Teclados**
   Los teclados permiten el acceso si se teclea una combinación adecuada:

   .. image:: files/teclado.png

   .. Fuente: https://pxhere.com/es/photo/679663

**Tarjetas de acceso**
   Sustituir las llaves tradicionales por tarjetas de acceso, tiene algunas
   ventajas:

   + Puede limitarse el acceso a determinados horarios.
   + Puede revocarse el acceso sin que tener que recuperar la tarjeta.
   + Puede establecerse una caducidad a la tarjeta.

   .. image:: files/tarjeta.jpg

   .. Fuente: https://www.pxfuel.com/es/free-photo-ozgkt

**Controles biométricos**

Accesa lógico
*************
El :dfn:`acceso lógico` es el acceso a través de algún servicio que posibilita
el ingreso de un cliente externo al interior del sistema informático. El
servicio es, generalmente, un servicio de red. ya que, si no existe *acceso
físico*, no es posible acercarse al equipo.

.. note:: Tenga presente que, cuando estamos sentados frente a nuestro
   ordenador, tenemos *acceso físico* ya que nos encontramos junto a él; pero, al
   introducir usuario y (generalmente) contraseña, practicamos el acceso lógico
   a través de un servicio de autenticación que no es de red.

Hay dos procesos relacionados con el control de accesos lógico:
 
+ La autenticación.
+ La autorización.

.. _seg-auth:

Autenticación
=============
La :dfn:`autenticación` es el proceso con el que se comprueba la identidad de un
agente que desea acceder o realizar alguna operación en el sistema.

Para ella los sistemas definen un conjunto de usuarios cuya identidad se
comprueba muy a menudo mediante contraseña, aunque pueden existir otros
sistemas, cada vez más frecuentes, como la huella dactilar.

Autenticación por contraseña
----------------------------
La autenticación por contraseña es el tipo de autenticación más habitual: al
usuario se le asigna una contraseña secreta para que junto al nombre de usuario
la introduzca sobre su ingreso. Si el usuario existe y la contraseña es la
correcta, el proceso de autenticación tendrá éxito.

Para mejorar la seguridad de este tipo de autenticación suelen implementarse
varias argucias que no son incompatibles entre sí:

- Las contraseñas *nunca se almacenan en claro*, sino que el resumen generado
  por una :ref:`función de hash <hash>`, de modo que. cuando se produce un
  ingreso, a la contraseña introducida por el usuario se le aplica la misma
  función y se compara el resumen generado con el almacenado. Si coinciden es
  prácticamente seguro que se introdujo la contraseña original y, en
  consecuencia, la autenticación tiene éxito. Se obra así para que, si se
  produce un robo del fichero de contraseñas, el ladrón no tenga directamente a
  su disposición todas las contraseñas, sino que tenga que aplicar
  :ref:`técnicas de fuerza bruta <ataques-auth>` para lograr averiguar alguna.

  .. note:: Échele un vistazo al :file:`/etc/shadow` de un *Linux* cualquiera y
     compruebe cómo las contraseñas no se guardan en claro.

- Se define una *política de contraseñas* que les garantize un mínimo de
  complejidad. Hablaremos de ella a continuación.

- Modernamente se ha introdicido el concepto de *autenticación en dos pasos* que
  también trataremos más adelante.

.. _politica-contraseñas:

.. rubric:: Política de contraseñas

La :dfn:`política de contraseñas` es el conjunto de reglas que se establecen en
la definición, redefinición y uso de contraseñas para evitar que éstas sean
fácilmente deducibles por un atacante. Téngase presente que ha de llegarse a
cierto equilibrio, puesto que si a resultas de esta política, las contraseñas
son extraordinariamente complicadas y largas, lo más probable es que muchos
usuarios acaben por apuntarlas en un papel de su mesa de escritorio o en un
*post-it* adherido al propio monitor.

Los criterios que se definen en estas políticas son estos:

- Su **fortaleza** determinada por:

  + Una *longitud mínima* que, normalmente, no se define inferior a 8 caracteres.
  + La obligación de incluir caracteres de distinto tipo, distinguiéndose entre:

    - Letras mayúsculas.
    - Letras minúsculas.
    - Dígitos.
    - Otros caracteres.

    Por ejemplo, puede exigirse que la contraseña contenga al menos tres de
    estos cuatro tipos, o que contenga los cuatro tipos.

  + Impedir que la contraseña incluya el nombre de usuario o partes sustanciales
    de este. El criterio se puede ampliar a evitar coincidencias con otros
    datos personales como el nombre real o la fecha de nacimiento.

  + Impedir la reutilización de la última contraseña o, en general, de las "n"
    últimas contraseñas.

- Si se hace un bloqueo temporal del usuario cuando se ha fallado un determinado
  número de veces en la introducción de la contraseña (p.e. un bloqueo de 15
  minutos antes 5 intentos fallos de autenticación). Esta prevención evita los
  :ref:`ataques de fuerza bruta <ataques-auth>`.

- Limitaciones temporales:

  - Establecer un tiempo de caducidad, llegado al cual se fuerza al usuario a
    redefinir la contraseña.
  - Establecer un tiempo mínimo para la redefinición. Esta limitación tiene
    bastante importancia si queremos impedir la reutilización de la contraseña
    y nos limitamos a evitar coincida con la última. Sin este tiempo, el usuario
    al caducar la contraseña, podría cambiarla e, inmediatamente, volver a
    realizar otro cambio para dejar la contraseña original.

.. note:: En *Linux* estas políticas pueden implementarse gracias a algunos
   módulos de :ref:`PAM <pam>`:

   * :ref:`pam_cracklib` para implementar los criterios relacionados con la
     fortaleza.
   * :manpage:`pam_tally2(8)` para implementar el bloqueo tras repetidos fallos
     de autenticación\ [#]_.
   * :ref:`chage <chage>` para establecer los criterios temporales.

Autenticación con claves
------------------------
Otro tipo es el que usa la autenticación mediante clave pública y privada.
Servicios como |SSH| o |VPN| pueden hacer uso de esta técnica de autenticación.

.. seealso:: Analice cómo funciona la :ref:`autenticación con claves en SSH <ssh-auth-claves>`.

Autenticación biométrica
------------------------
Se ha extendido, sobre todo en los dispositivos móviles, la autenticación o el
desbloqueo mediante huella dactilar.

Autenticación en dos pasos (|2FA|)
----------------------------------
La :dfn:`autenticación en dos pasos` consiste en considerar válida la
acreditación cuando el usuario es capaz de presentar dos pruebas diferentes de
su identidad aportando o algo que saben o algo que tienen o algo que son. Un
ejemplo bastante extendido y ya consolidado de este tipo de autenticación es la
que se produce al retirar dinero de un cajero automático en la que al cliente se
le exige algo que tiene (la tarjeta) y algo que sabe sabe (el |PIN| de la
misma).

Cualquier combinación de dos pruebas diferentes es válida. Por ejemplo.
podríamos aportar una prueba biométrica (algo que somos) y un certificado
digital (algo que tenemos), pero es muy común que una de las dos pruebas sea una
contraseña (algo que sabemos). Precisamente uno de los puntos débiles de la
autenticación por contraseña es la poca diligencia que siempre muestra el
usuario en modificarla y mantenerla segura; y la autenticación |2FA| palía esta
falta al exigir, además, que el usuario porte consigo algo propio. Así, es
frecuente que este autenticación se implemente del siguiente modo:

+ La autenticación previa mediante usuario y contraseña.
+ El envío de un *tóken* mediante |SMS| o aplicación móvil a su teléfono
  particular, que confirma la identidad.

Esta autenticación es ya obligatoria para entidades bancarias por directrices de
la *Autoridad Bancaria Europea* (|EBA|). Es cierto que desde hace ya mucho
tiempo, los bancos usan autenticación |2FA| para el acceso telemático de sus
clientes como una combinación de usuario y contraseña (algo que se sabe); y
tarjeta de coordenadas (algo que se posee). Sin embargo, la información de una
tarjeta de coordenadas es algo estático y fácilmente reproducible si se tiene
acceso físico a ella por un momento. Por consiguiente, sustituir esta
información estática por otra dinámica (el *tóken*) aumenta considerablemente la
seguridad.

El |RGPD|, aunque sólo menciona expresamente el cifrado, abre la posibilidad a
implantar medidas que palíen la falibilidad humana y, por tanto, al uso de la
autenticación |2FA|.

Autorización
============
La :dfn:`autorización` es el proceso con el que se comprueba que un usuario
identificado tiene permiso para acceder a un recurso o realizar una acción. Hay,
fundamentalmente, tres filosofías para la concesión de autorizaciones que
reciben el nombre de :dfn:`mecanismos de control de acceso`.

.. _control-accesos:

Mecanismos de control de acceso
-------------------------------
.. _control-dac:

#. Control de accesos discrecional (|DAC|)

   Es el mecanismo más habitual en que la seguridad se basa en la identidad de
   los usuarios y en los permisos que se otorgan a éstos sobre los distintos
   objetos del sistema. En él cada objeto tiene por propietario a un usuario y
   es éste el que tiene potestad para conceder, a discreción, permisos sobre su
   propiedad al resto de los usuarios. En consecuencia, el control de la
   seguridad no está centralizado, sino que cada usuario decide sobre la
   seguridad de los objetos que le pertenecen.

   Es el mecanismo que suelen implementar de serie los sistemas operativos
   (*Windows*, *Linux*, etc.), y presentan dos aproximaciones distintas para la
   definición de estos permisos discrecionales:

   - El tradicional en los sistemas *UNIX* es el sistema |POSIX|, conocido
     también como |UGO|, que define para cada objeto del sistema de ficheros un
     usuario propietario y un grupo propietario, de suerte que se definen tres
     grados de accesibilidad (permisos) distintos: para el propietario, para los
     usuarios pertenecientes al grupo propietario y para el resto de usuarios.
     Esa es la razón de su nombre y a esta técnica dedicamos :ref:`la definición
     elemental de permisos <permusu>`.

   - Las listas de control de accesos (|ACL|) que consisten en poder definir
     para cada objeto los conjuntos de permisos para cualesquiera usuarios y
     cualesquiera grupos. Por lo general se define un conjunto de permisos por
     defecto, que serán los que tengan los usuarios que no aparezcan en la lista
     o no pertenezcan a alguno de los grupos incluidos en la lista. Este es el
     método que usa *Windows*, aunque en los sistemas *UNIX* modernos se puede
     habilitar como complemento del anterior para aquellos objetos en los que no
     sea suficiente el sistema |POSIX|, que es menos granular. Este será uno de
     los aspectos avanzados que tratemos.

#. Control de accesos obligatorio (|MAC|)

   Este mecanismo se caracteriza porque el control está centralizado. El
   mecanismo se basa en la definición de etiquetas sobre los objetos que indican
   su nivel de sensibilidad (p.e. desclasificado, restringido, confidencial,
   secreto y alto secreto) y la definición de etiquetas sobre los sujetos que
   indican su nivel de acceso, de manera que el sujeto podrá actuar sobre el
   objeto sólo si tiene un nivel de acceso superior al de la sensibilidad del
   objeto.

   Todas estas políticas de acceso se definen de forma centralizada, sin que
   ningún usuario de forma discrecional pueda conceder a otros privilegios.

   En *Linux* hay posibilidad de implementar este mecanismo de
   seguridad a través de SELinux_, que usa entre otras RedHat, o :ref:`Apparmor
   <apparmor>`, que usan SuSE, Ubuntu o Debian (a partir de su versión 10). De
   hecho, es normal que en los linux modernos, este mecanismo esté habilitado
   por defecto.

#. Control de accesos basado en roles (|RBAC|)

   En este mecanismo se predefinen una serie de roles, a cada uno de los cuales
   se le asigna una serie de privilegios. Un administrador asignará a cada
   usuario uno o varios roles, de modo que los privilegios del usuario
   dependerán de cuál sea el rol o los roles que desempeñe.

   En cierta medida, es equivalente a un modelo |DAC| con |ACL|\ s en el que se
   asignan permisos exclusivamente a grupos de usuarios, no a usuarios
   particulares.

   Aunque no sea el ejemplo de un sistema operativo, la plataforma Moodle_
   implementa un control de accesos basado en roles.
   
.. _seg-permisos-datos:

Permisos |DAC|
--------------
El control discrecional de accesos es el más comúnmente implementado en los
sistemas operativos (sin perjuicio de que se pueda complementar con algún otro
mecanismo), así que a él dedicaremos el resto del epígrafe.

|DAC| consiste en definir reglas de acceso para cada recurso y se implementa
mayoritariamente utilizando dos estrategias distintas:

- El sistemas de permisos |POSIX| (esto es, el sistema |UGO|), utilizado en los
  sistemas *UNIX* y que ya debió estudiarse en el módulo de :ref:`Sistemas
  Operativos Monopuesto <som>`.
- Las listas de control de accesos que permiten en cada recurso definir reglas
  específicas para cada usuario y grupo. *Windows* utiliza este sistema por
  defecto, lo cual implica que :ref:`debió verse en el módulo de Sistemas
  Operativos Monopuesto <dac-windows>`. En *Linux*, en cambio, es opcional y
  sólo es necesario recurrir a él cuando el sistema |POSIX|, que es más simple,
  no resulta suficiente, razón por la cual no suele incorporarse a un curso
  básico sobre este sistema operativo, como es el que se imparte en
  :ref:`Sistemas Operativos Monopuesto <som>`.

Así pues, la única tarea pendiente en este módulo es el estudio de los
:ref:`permisos ACL en Linux <acls>`.

.. include:: /guias/02.seg/99.ejercicios/021.acl.rst

.. rubric:: Notas al pie

.. [#] El uso de este módulo no es equivalente a *software* como
   :ref:`fail2ban <fail2ban>`. Este módulo bloquea usuarios y funciona
   para cualquier acceso incluso no remoto, mientras que :program:`fal2ban`
   bloque máquinas de origen.

.. |DAC| replace:: :abbr:`DAC (Discretionary Access Control)`
.. |UGO| replace:: :abbr:`UGO (User-Group-Others)`
.. |MAC| replace::  :abbr:`MAC (Mandatory Access Control)`
.. |RBAC| replace::  :abbr:`RBAC (Role-Based Access Control)`
.. |POSIX| replace::  :abbr:`POSIX (Portable Operating System Interface for uniX)`
.. |2FA| replace::  :abbr:`2FA (Two-Factor Autentication)`
.. |EBA| replace::  :abbr:`EBA (European Banking Authority)`
.. |SMS| replace::  :abbr:`SMS (Short Message Service)`
.. |RGPD| replace::  :abbr:`RGPD (Reglamento General de Protección de Datos)`
.. |PIN| replace:: :abbr:`PIN (Personal Identifier Number)`

.. _SELinux: https://es.wikipedia.org/wiki/SELinux
.. _Moodle: https://www.moodle.org
