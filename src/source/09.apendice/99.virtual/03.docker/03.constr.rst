.. _docker-const:

Construcción
************
La función de :program:`Docker` no es sólo aislar una aplicación tomando una
imagen y alterando su configuración, sino también la de distribuir aplicaciones
propias o servicios preconfigurados. Esto implica generar nuestras propias
imágenes para que terceros sean capaces de crear sus propios contenedores a
partir de ellas.

Para ello necesitamos:

- Un registro con el que poder hacer la distribución y :kbd:`docker push` para
  exportar la imagen desde nuestro repositorio local. Lo más sencillo es usar
  una cuenta gratuita en el propio `Docker Hub`_

- Generar en sí la imagen para lo cual hay dos vías:

  + Convertir en imagen un contenedor.
  + La más apropiada que consiste en construir la imagen indicando a
    :program:`Docker` cómo llevarlo a cabo.

.. _docker-commit:

Conversión a imágenes
=====================
El primer método consiste en convertir un contenedor en una imagen, para lo cual
se usa :kbd:`docker commit`. Para ilustrarlo consideremos que queremos generar
una imagen de :ref:`nginx <n-ginx>` en la que servimos una página estática
que se alberga en :file:`/srv/www`::

   # docker run -d --name="nginx-test" -p 80:80 nginx:alpine 
   f7fc06d5ed70910bcf837c427775c894a0b21d4fc22c1f50ffcc9d079d910e12
   # docker exec -ti nginx-test sh
   / # mkdir /srv/www
   / # cat > /srv/www/index.html
   <!DOCTYPE html>
   <html lang="es">
   <meta charset="utf-8">
   <title>Página de prueba</title>

   <h1>Página de prueba</h1>
   </html>

   / # sed -ir '1,/root\s/{s:root.*:root /srv/www\;:}' /etc/nginx/conf.d/default.conf
   / # exit
   # docker stop nginx-test

En este punto tenemos el contenedor con los cambios que pretendíamos. Ahora es
momento de generar a partir de él la imagen y ponerle un nombre y un a etiqueta::

   # docker commit -a "Perico de los Palotes <perico@mail.org>" \
                   -m "nginx que sirve el contenido de /srv/www" nginx-test
   # docker image ls
   REPOSITORY           TAG            IMAGE ID          CREATED              SIZE
   <none>               <none>         da408ad65b98      About a minute ago   19.7M
   # docker image tag da408ad65b98 miusuario/nginx-srv:v1
   # docker image ls
   REPOSITORY           TAG            IMAGE ID          CREATED              SIZE
   miusuario/nginx-srv  v1             da408ad65b98      4 minutes ago        19.7M

Obsérvese que hemos dado al contenedor el nombre *miusuario/nginx-test* donde
"miusuario" es el usuario del que disponemos en `Docker Hub`_.

.. _docker-push:
.. _docker-login:

Finalmente, ya podemos subir la imagen al repositorio\ [#]_::

   # docker login -u miusuario
   # docker push miusuario/nginx-srv:v1

Es interesante que comparemos la imagen original (*nginx:alpine*) con nuestra
imagen, cuya diferencia es únicamente una simple manipulación de ficheros. Eso
se traduce en que el almacenamiento crea una capa adicional::

   # docker image inspect -f '{{json .RootFS.Layers}}' nginx:alpine
   ["sha256:531743b7098cb2aaf615641007a129173f63ed86ca32fe7b5a246a1c47286028",
    "sha256:6f23cf4d16deb170554e0237bec12e4fb488c78222a20e172462ba4776affb3d"]
   # docker image inspect -f '{{json .RootFS.Layers}}' miusuario/nginx-srv:v1
   ["sha256:531743b7098cb2aaf615641007a129173f63ed86ca32fe7b5a246a1c47286028",
    "sha256:6f23cf4d16deb170554e0237bec12e4fb488c78222a20e172462ba4776affb3d"
    "sha256:eb7259d6e25c133fc5f662d2eb25b02c24194f58694f948fa596c722d0fbcc81"]

.. _docker-build:

Generación de imágenes
======================
La otra alternativa es más limpia y más recomendable, y consiste en generar una
imagen indicando cuáles son las acciones que deben llevarse a cabo para obtener
la imagen deseada. Para ello debe crear un directorio de trabajo y dentro de él
un fichero :file:`Dockerfile` con las instrucciones.

Para ilustrar el procedimiento crearemos una imagen equivalente a la generada
bajo el epígrafe anterior::

   # mkdir /tmp/nginx-test
   # cd /tmp/nginx-text
   # cat > index.html
   <!DOCTYPE html>
   <html lang="es">
   <meta charset="utf-8">
   <title>Página de prueba</title>

   <h1>Página de prueba</h1>
   </html>

   # vim Dockerfile

Y dentro de este fichero :file:`Dockerfile` escribiremos lo siguiente:

.. code-block:: docker

   FROM nginx:alpine

   RUN  sed -ir '1,/root\s/{s:root.*:root /srv/www\;:}' /etc/nginx/conf.d/default.conf ;\
        mkdir /srv/www

   COPY index.html /srv/www

No es excesivamente complicado entender qué hace casa línea. Sí es interesante
tener presente que cada directiva :kbd:`RUN` o COPY :kbd:`COPY` genera una capa
distinta para el driver de almacenamiento y, en consecuencia, es conveniente
minimizarlas. Por ese motivo la directiva :kbd:`RUN` contiene dos órdenes, en
vez de haber definido dos directivas :kbd:`RUN` para cada orden.

Con todo, ya solo falta generar la imagen::

   # docker build -t miusuario/nginx-test:v1b .

y :ref:`subir la imagen <docker-push>`. Es importante tener presente también que
partir de la imagen *nginx:alpine* no sólo implica partir del sistema de
archivos de ese contenedor, sino también del resto de configuración. Por ese
motivo, no es necesario indicar qué deseamos exponer el puerto **80** o que
queremos que se ejecute :ref:`nginx <n-ginx>`.  Por eso, aunque a efectos
prácticos no tenga sentido alguno, ilustremos cómo obtener una imagen semejante
partiendo de la imagen original Alpine_, lo cual implica instalar :ref:`nginx
<n-ginx>` y hacer una configuración adicional.

Para ello tomemos otro directorio de trabajo en el que incluyamos un
:file:`Dockerfile`::

   # mkdir /tmp/nginx-test.2
   # cd /tmp/nginx-test.2
   # mkdir -p archives/srv/www archives/etc/nginx/conf.d
   # vim archives/srv/www/index.html
   # vim archives/etc/nginx/conf.d/default.conf
   # vim Dockerfile

El fichero :file:`index.html` puede ser el mismo que el anterior;
:file:`default.conf` puede ser, simplemente, este:

.. code-block:: nginx

   server {
      listen 80;

      root  /srv/www;
      try_files  $uri $uri/ =404;
   }
   
y :file:`Dockerfile`, el siguiente:

.. code-block:: docker

   FROM    alpine
   RUN     apk update && apk add nginx && \
           ln -s /dev/stdout /var/log/nginx/access.log;\
           ln -s /dev/stderr /var/log/nginx/error.log;\
           mkdir /srv/www;\
           mkdir /run/nginx

   COPY    ./archives /

   EXPOSE  80/tcp
   CMD     ["nginx", "-g", "daemon off;"]

Con lo cual, ya podemos generar la imagen::

   # docker build -t miusuario/nginx-test:v1c .

cuyo almacenamiento debe tener tres capas: la generada por la imagen de Alpine_,
la generada por la directiva :kbd:`RUN` y la generada por la directiva
:kbd:`COPY`.

.. note:: El demonio usa una caché que almacena los resultados intermedios, por
   lo que puede interesar durante la fase de desarrollo de la imagen, descomponer
   las acciones en múltiples directivas :kbd:`RUN` y solo al final minimizar el
   número de capas.

Hay otras directivas interesantes que puede incluir un :file:`Dockerfile`:

:kbd:`VOLUME`
   permite definir :ref:`volúmenes anónimos <docker-volume>` que se crearán
   automáticamente al generar un contenedor a partir de la imagen sin que sea
   necesario declararlos con :kbd:`-v`. Por ejemplo, si hubiéramos querido hacer
   permanentes los registros podríamos haber utilizado este :file:`Dockerfile`:

   .. code-block:: docker

      FROM    alpine
      RUN     apk update && apk add nginx && \
              mkdir /srv/www;\
              mkdir /run/nginx

      COPY    ./archives /

      VOLUME  /var/lob/nginx

      EXPOSE  80/tcp
      CMD     ["nginx", "-g", "daemon off;"]

:kbd:`WORKDIR`
   Define cuál es el directorio de trabajo dentro del contenedor.

:kbd:`ENV`
   Permite definir variables de entorno. Por ejemplo:

   .. code-block:: docker

      ENV   DEBUG=True

:kbd:`ARG`
   Permite definir variables que pueden usarse en otras directivas:

   .. code-block:: docker

      ARG   VERSION=3.9
      FROM  alpine${VERSION:+:$VERSION}

   Las variables también pueden definirse a través de la opción
   :kbd:`--build-arg` de :kbd:`docker build`, que, además, tiene preferencia
   sobre la directiva :kbd:`ARG`::

      # docker build -t miusuario/nginx-test:v1v --build-arg VERSION=3.10 .

.. rubric:: Cnstrucción *multi-stage*

Hay por último un concepto bastante interesante que es el de la cosntrucción
multistage de una *imagen* que se requiere cuando para crear una imagen
necesitamos la creación de otras imágenes previas intermedias. Por ejemplo,
imaginemos que en nuestra imagen necesitamos incluir un programa compilado 
con gcc_. Dado que nuestra imagen necesita únicamente el ejecutable, no tiene
sentido que incluyamos el compilador en ella, sino solamente el resultado de la
compilación; así que pudemos crear una imagen intermedia previa con el
compilador que genere el código compilado y la imagen definitiva que,
simplemente, obtenga el resultado de esta compilación de esa primera imagen.
Para ilustrarlo supongamos que creamos un directorio de trabajo::

   # mkdir /tmp/multistage
   # cd /tmp/multistage
   # vim app.c
   # vim Dockerfile

donde el código fuente :file:`app.c` es simplemente el código del "Hola,
mundo":

.. code-block:: c

   #include <stdio.h>

   int main() {
      printf("Hola, mundo\n");
      return 0;
   }

y el :file:`Dockerfile` este:

.. code-block:: docker

   FROM     gcc as builder
   WORKDIR  /tmp
   COPY     app.c .
   RUN      gcc -static -o app app.c

   FROM     alpine
   COPY     --from=builder /tmp/app /bin
   CMD      ["app"]

Como resulta de utlizar este :file:`Dockerfile`, obtendremos una imagen basada
en Alpine_ que contiene y ejecuta nuestra aplicación compilada.

.. rubric:: Notas al pie

.. [#] Mediante :kbd:`docker login` se puede especificar cuál es el servidor de
   registro, si este no es `Docker Hub`_.


.. _Docker Hub: https://hub.docker.com/
.. _Alpine: https://alpinelinux.org/
.. _gcc: https://gcc.gnu.org/
