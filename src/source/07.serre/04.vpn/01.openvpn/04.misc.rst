Otros aspectos
**************

.. _vpn+haproxy:

Redes restringidas
==================

.. todo:: Repasar este apartado, porque puede usarse *Websockets* con idéntico
   fin.

Como en el caso de otros servicios como :ref:`ssh <ssh>`, es posible que
deseemos establecer una conexión |VPN| desde redes cuyo acceso al exterior esté
restringido. Obviamente, este inconveniente será más habitual en conexiones al
servidor de un *road warrior*.

La estrategia es conectarse a través del puerto *443/TCP* y la discusión sobre
ello ya está :ref:`desarrollada al hablar sobre ssh <redes-restr>`. En ella se
establecen dos soluciones, usar :ref:`sslh <sslh>` o :ref:`haproxy
<haproxy>`, dependiendo de cuál sea la fiscalización, y en ambas se presupuso
que el servidor |VPN| escuchaba en el puerto *1194/TCP*

Las configuraciones necesarias para :program:`sslh` y :program:`haproxy` ya
están explicadas en los apartados referidos, pero toca aquí indicar cómo
configurar el servicio |VPN|. Para ello presupondremos que nuestra intención es
conectar un equipo móvil estableciendo el túnel en capa de red.

Servidor
--------
En el servidor podemos optar por hacer que el servidor escuche por el puerto
*1194/UDP* y también por el *1194/TCP*, esto es, levantamos dos instancias de
:program:`openvpn` con la misma configuración y en la que sólo cambian las
directivas que indican el puerto y protocolo de escucha. Para ello podemos crear
un fichero :file:`/etc/openvpn/common` con las directivas comunes (la mayoria) y
dos ficheros, :file:`free.conf`::

   port 1194
   proto udp
   dev tun0

   server 10.0.8.0 255.255.255.128
   ifconfig-pool-persist ipp-free.txt

   config common

y :file:`ies.conf`\ [#]_::

   local 127.0.0.1
   port 1194
   proto tcp
   dev tun1

   server 10.0.8.128 255.255.255.128
   ifconfig-pool-persist ipp-ies.txt

   config common

Cliente
-------
Ensayaremos una configuración análaga a :ref:`la ya aconsejada <srw3-client>`,
aunque ahora podemos incluir tres nodos *connection*::

   <connection>
      remote www.example.net 1194 udp
   </connection>

   <connection>
      remote www.example.net 443 tcp
   </connection>

   <connection>
      remote www.example.net 12345 tcp
   </connection>

.. note:: Si conocemos de antemano que alguna conexión no funcionará, podemos
   eliminarla para que sea más ágil el establecimiento del túnel.

La primera conexión es posible si la red no es restringida, mientras que la
segunda y la tercera permitirían la conexión desde redes restringidas. La
segunda es bastante clara: conectamos directamente con el puerto *443/TCP* del
servidor bien porque usemos :program:`sslh` bien porque usamos
:program:`haproxy` utlizando la :ref:`segunda variante <haproxy-2v>` con la que
permitimos conectar sin crear un túnel |TLS|.

Ahora bien, si requerimos un encapsulamiento |TLS| para burlar la fiscalización
de un *proxy*, entonces no podemos conectar directamente, sino que tenemos que
usar algún *software* intermediario. Uno apropiado es `stunnel
<https://www.stunnel.org/>`_.

En nuestro caso, sólo necesitamos usarlo en el cliente, ya que en el servidor es
:program:`haproxy` el que se encarga de eliminar el encapsulamiento. Así pues::

   # apt-get install stunnel 

La configuración de este servicio consiste en incluir dentro de
:file:`/etc/stunnel` distintas configuraciones. En nuestro caso, una adecuada
es::

   # /etc/stunnel/tunnel.conf
   [wrapper]
   client = yes
   accept = localhost:12345
   connect = www.example.net:443

que permite que nuestro cliente |VPN| se conecte al puerto *12345/TCP* para que
se encapsulen sus datos y, este tráfico ya encapsulado, se envíe al puerto
*443/TCP* del servidor en que debe escuchar :program:`haproxy`.

El problema de ello es que al cliente |VPN|, en principio, habría que decirle
que debe conectarse a *localhost*, no al servidor real\ [#]_, y eso provocaría
que escribera mal las entradas en la tabla de encaminamiento si nuestra
intención es hacer del servidor |VPN| la puerta de enlace predeterminada. Para
solucionar este caso, una buena manera de levantar la interfaz es esta::

   iface tun0 inet manual
      openvpn client
      up   stunnel /etc/stunnel/tunnel.conf
      down kill $(cat /var/run/stunnel4.pid)
      up   iptables -t nat -A OUTPUT -d www.example.net -p tcp --dport 12345 -j REDIRECT
      down iptables -t nat -D OUTPUT -d www.example.net -p tcp --dport 12345 -j REDIRECT

es decir, hacemos que el tráfico que pretendía conectar con el puerto
*12345/TCP* del servidor |VPN| acabe en el propio cliente en donde escucha
:program:`stunnel` que se encarga del resto. Esto permite escribir la conexión
tal y como la hemos sugerido al comienzo del epígrafe, lo cual *engañará* al
propio cliente haciéndole creer que conecta directamente con el servidor. En
consecuencia escribirá correctamente las entradas de encaminamiento.

.. note:: Obviamente, si no incluimos la directiva *redirect-gateway*, porque no
   es nuestra intención hacer que el cliente salga a internet a través del túnel
   VPN, no es necesaria esta argucia, por lo que podremos ahorranos la la
   redirección con :command:`iptables` y deberemos decir en el nodo ``connection``
   correspondiente que conectamos a *localhost*.

.. note:: Nótese que también aprovechamos la activación y desactivación de la
   interfaz para arrancar y parar :program:`stunnel`.

Liberando redes restringidas
============================
Este apartado es una vuelta de tuerca al anterior, en el que nos hemos limitado
a que un cliente individual burle las restringiones impuestas por la conexión
a internet de la red remota. Nuestra intención ahora es lograr que, de forma
transparente, todos los dispositivos de la red remota (o al menos una subred
dentro de ella) conecten a internet sin restricciones.

A grandes rasgos, la estrategia para lograrlo es la siguiente:

#. Disponemos un servidor |VPN| *a prueba de redes restringidas* en un |VPS|
   contratado con ancho de banda ilimitado,

#. Instalamos un cliente |VPN| en el router de la red remota. Como hemos
   estudiado :program:`openvpn`, habremos instalado este servidor en el |VPS| y
   necesitaremos tambien instalar este mismo en el cliente, lo cual restringe
   nuestra elección del router. Alternativas posibles oon:

   - Una máquina con dos interfaces de red.
   - Un router neutro que permita la instalación de `openwrt
     <https://openwrt.org/>`_ u otro linux empotrado capaz de configurar a
     voluntad un cliente :program:`openvpn`.
   - Un router `mikrotik <https://wiki.mikrotik.com/wiki/Main_Page>`_.

#. Al hacer lo anterior el *router* tendrá dos posibles salidas a intenet:

   - La salida a través de su puerta de enlace, capada de modo que posiblemente
     los únicos protocolos permitidos sean |HTTP|, |HTTP|\ s y |DNS|.

   - La salida sin restricciones a través del tunel |VPN|.

   configuramos en él un *encaminamiento basado en políticas* (véase
   :ref:`policy-based routing <pbr>`) para que los clientes que acceden a
   internet a través del router salgan a internet usando la puerta de enlace
   cuando el tráfico es |HTTP|, |HTTP|\ s o |DNS|, y el túnel en cualquier otro
   caso. 

.. todo:: Continuar escribiendo...

.. rubric:: Notas al pie

.. [#] Este instancia escucha sólo en la interfaz local, ya que llegaremos a
   ella o por un :program:`sslh` o por un :program:`haproxy` que se encuentra
   en la misma máquina. De este modo, el acceso al sercico |VPN| se hace o por
   el puerto *1194/UDP* desde redes no restringidas o por el puerto *443/TCP*
   desde redes restringidas.

.. [#] O sea, que la conexión debería haberse escrito::

         <connection>
            remote localhost 12345 tcp
         </connection>

      y no *www.example.net*.

.. |TLS| replace:: :abbr:`TLS (Transport Layer Security)`
.. |VPS| replace:: :abbr:`VPS (Virtual Private Server)`
