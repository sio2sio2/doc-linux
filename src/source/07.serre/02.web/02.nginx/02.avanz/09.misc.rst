Otros aspectos
**************

.. _nginx-map:

Definición mediante mapeo
=========================
Si requerimos definir una variable dependiendo del valor de otra, disponemos de
la directiva `map
<http://nginx.org/en/docs/http/ngx_http_map_module.html#map>`_:

.. code-block:: nginx

   map $host $dominio {
      hostnames;

      default              "desconocido";
      *.example.net        "example";
      *.dominio.org        "dominio";
      ~[^.]+\.otro\.[^.]+  "otro";
   }

En este caso, se define la variable ``$dominio`` a partir de los valores de la
variable ``$host``. Se comprueba si el valor de esta última concuerda con
alguna entrada de la izquierda y, si es así, se asigna el valor de la columna
derecha correspondiente. Si no hay concordancia, se usa la entrada *default*.
Además, se puede incluir la palabra :kbd:`hostnames` para expresar que lo
contenido son nombres de máquina y que se entienda la notación con asterisco.
Si la lista es larga, puede usarse ``include``:

.. code-block:: nginx

   map $host $dominio {
      hostnames;

      include dominios.txt;
   }

y en el fichero :file:`/etc/nginx/dominios.txt` escribir la lista de dos
columnas.

Dado que el módulo `ngx_http_referer
<http://nginx.org/en/docs/http/ngx_http_referer_module.html>`_ no está incluido
en el ejecutable que viene en el paquete *nginx-light* y el paquete no es
instalable de forma separada, podríamos emular medianamente el comportamiento de
``$invalid_referer`` del siguiente modo:

.. code-block:: nginx

   map $http_referer $invalid_referer {
      default                 1;

      # Dominios  para los que se permite se considera válido el referer.
      "~www.example.net"      0;
      "~example.net"          0;
   }

.. _nginx-comp:

Compresión
==========
Es muy reomendable, para ahorrar ancho de banda configurar el servidor para que
comprima aquellos ficheros cuyp ratio de compresión es alto. La configuración
predeterminada sólo comprime los documentos |HTML|, así que creamos un fichero
de :download:`configuración adicional <files/gzip.conf>` como
:file:`/etc/nginx/conf.d/gzip.conf`:

.. literalinclude:: files/gzip.conf
   :language: nginx

.. _nginx-debug:

Depuración
==========
Es obvio que depurar el funcionamiento del servidor pasa por mirar los ficheros
de registro. Sin embargo, si realizamos en la configuración :ref:`reescrituras
internas <ngx-rewrite>`, podremos comprobar que estas no dejan rastro en los
*logs*, ya que su registro está deshabilitado. Para habilitarlo podemos añadir
fichero :file:`/etc/nginx/conf.d/rewrite.conf`::

   # cat > /etc/nginx/conf.d/rewrite.conf
   rewrite_log on;

pero esto no es suficiente, ya que se registran en el registro de errores con
nivel *notice*, mientras que el nivel predeterminado es *error*.
Consecuentemente, habrá que retocar la directiva ``error_log`` que corresponda
para cambiar el nivel. Por ejemplo::

   error_log  /var/log/nginx/error.log notice;

.. _nginx-tras-proxy:

Servicio tras *proxy*
=====================
Cuando un :ref:`proxy inverso <proxy-inverso>` intermedia interceptando la
comunicación entre clientes y servidor, puede actuar de :ref:`modo transparente
<proxy-transparente>` (en cuyo caso nuestro :program:`nginx` será incapaz de
reconocerlo) o no. Es en este segundo caso en el que el
el :ref:`proxy web inverso <proxy-web-inverso>` produce distorsiones en la
comunicación que debemos tener en cuenta al configurar el servidor *web*:

a. El *proxy* captura la petición del cliente y la reproduce hacia el servidor lo
   que supone que la comunicación que recibe el servidor no proceda del cliente
   original, sino del *proxy*.

#. Puede darse el caso de que en las comunicaciones cifradas, el extremo de
   cifrado se traslade del servidor al *proxy*, a fin de que este entienda la
   comunicación  |HTTP| y pueda hacer el trabajo que tenga encomendado (cacheo,
   balanceo, etc.). En ese caso, el servidor recibirá una conexión no segura,
   pero es conveniente que sepa que originariamente era segura.

Tenga presente que tratar estas cabeceras en el servidor, no es sólo necesario
para el correcto funcionakiento del servidor, sino también para el correcto
funcionamiento de las aplicaciones que éste ejecute.  Por ejemplo, las
aplicaciones escritas en |PHP| consultan la dirección remota a través de
``$_SERVER["ADDRESS"]`` y si está activo el protocolo seguro a través de
``$_SERVER["HTTPS"]``. Por tanto, configurar bien el servidor para que ejecute
aplicaciones |PHP| implica que ambos parámetros que pasa el servidor *web* al
intérprete tengan los valores adecuados.

.. _nginx-clientip:

Cliente original
----------------
Un *proxy* intermedio que no que no actúe de forma transparente, hará creer al
servidor web que todas las peticiones las recibe de él. En consecuencia,
cualquier decisión que queramos tomar en función de quién sea quien nos haga la
petición (p.e. si la petición es de un cliente local o uno remoto), será
imposible.

Para soslayar este inconveniente los *proxies* pueblan la cabecera
:ref:`X-Forwarded-For <xforwardedfor>`, de manera que el servidor pueda
recalcular la dirección que identifica al cliente original y definir la variable
:kbd:`$remote_addr`, en vez de usar la |IP| de la conexióni (que será la del
*proxy*). Para que :program:`nginx` sea capaz de aprovechar la información de
esta cabecera  puede crearse un fichero con contenido semejante a éste que
aprovecha el módulo `ngx_http_realip_module
<http://nginx.org/en/docs/http/ngx_http_realip_module.html>`_::

   # /etc/nginx/conf.d/realip.conf
   set_real_ip_from 127.0.0.1;
   set_real_ip_from 10.0.0.0/8;
   real_ip_recursive on;
   real_ip_header X-Forwarded-For;

La directiva `real_ip_header
<http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_header>`_
permite indicar cuál es el nombre del campo a analizar, `set_real_ip_from
<http://nginx.org/en/docs/http/ngx_http_realip_module.html#set_real_ip_from>`_
las redes y máquinas en que consideramos que hay *proxies* que alteran la *ip*
original y que queremos ignorar; y `real_ip_recursive
<http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_recursive>`_
provoca a *off* que consideremos la *ip* del cliente la última contenida en
``X-Forwarded-For`` (siempre que la ``$remote_addr`` coincida con alguna de
las referidas en ``set_real_ip_from``); y a *on*, que la *ip* del cliente sea
la última de ``X-Forwarded-For`` que tampoco coincida con las referidas en
``set_real_ip_from``.

Para ilustrarlo supongamos este esquema:

.. image:: files/proxies.png

que genera la siguiente cabecera ``X-Forwarded-For``:

.. code-block:: none

   X-Forwarded-For: 80.35.60.114 123.12.21.34 10.35.2.3

y un ``$remote_address`` original que vale *127.0.0.1*, ya que el *proxy* que
recibe la comunicación en nuestro servidor (:program:`haproxy`) se comunica con
:program:`nginx` a través de la interfaz de *loopback*.  En este caso, y con la
configuración anterior en :file:`conf.d/realip.conf`:

* Si ``real_ip_recursive`` está deshabilitado, ``$remote_address`` acabará
  valiendo *10.35.2.3*, o sea, la última *ip* de ``X-Forwarded-For``.
* En caso contrario, ``$remote_address`` valdrá *123.12.21.34* ya que éste es el
  último valor de ``X-Forwarded-For`` que no está incluido en las directivas
  ``set_real_ip_from``.

Protocolo original
------------------
Para que el *proxy* declare el protocolo (|HTTP|\ s) con el que recibió la
petición se suele usar otra cabecera, *X-Forwarded-Proto*, con valor *https* si
el protocolo original era |HTTP|\ s. Para tenerlo en cuenta en nuestro servidor
podemos incluir esta configuración:

.. code-block:: nginx

   # /etc/nginx/conf.d/https.conf
   map $http_x_forwarded_proto $_https {
      default  $https;
      https    on;
   }

que permite conocer la naturalza original del protocolo usando la variable de
usuario :kbd:`$_https` en vez de la original :kbd:`$https`. Ahora, basta con
usar :kbd:`$_https` allí donde usábamos antes :kbd:`$https`:

.. code-block:: nginx

   server {
      listen   80;

      server_name _;

      root /srv/www;
      try_files $uri $uri/ =404;

      # Necesario si queremos redirigir el tráfico seguro a no seguro
      if ($_https != "on") {
         return 301 https://$host$uri$is_args$args;
      }

   }


Además, si el sitio es dinámico y usa |PHP|, debemos hacérselo al intérprete
añadiendo otro bloque a la configuración:

.. code-block:: nginx
   :emphasize-lines: 3

   location ~ \.php$ {
      include snippets/fastcgi-php.conf;
      fastcgi_param  HTTPS  $_https if_not_empty;
      fastcgi_pass php;
   }

Página de mantenimiento
=======================
En ocasiones, podemos requerir ocultar temporalmente uno o varios de los sitios
web que nuestro servidor aloja. Podemos optar por distintas estrategias, pero
una muy cómoda es configurar :command:`nginx` de modo que:

a. No se requiere alterar la configuración del servidor para habilitar o
   deshabilitar la situación de mantenimiento.

#. Si en :file:`/srv/www/enobras`, creamos el archivo :file:`enabled`, todos los
   sitios que alojemos pasarán a encontrarse en mantemiento y se mostrará una
   página que informe de ello.

#. Si deseamos poner en mantemiento un sitio particular, entonces debemos crear
   el archivo :file:`enabled-nombresitio`. Por ejemplo, para mostrar la página de
   mantenimiento exclusivamente para el sitio *info.example.net*, debemos crear
   el archivo :file:`enabled-info`.

Para lograr este comportamiento debemos:

#. Crear el directorio :file:`/srv/www/enobras` con una página de matenimiento
   apropiada (p.e. :download:`ésta <files/mantenimiento.html>`).

#. Crear el *snippet* :download:`mantenimiento.conf <files/mantenimiento.conf>`:

   .. literalinclude:: files/mantenimiento.conf
      :language: nginx

.. todo:: La configuración con |IP|\ s que burlan el mantenimiento que se
   aconseja a continuación no está probada.

Listo. Ahora bien, si el mantenimiento exige hacer cambios sobre la página que
requieren el acceso a la aplicación, la página de mantenimiento nos impedirá
también a nosotros acceder y, por tanto, hacer y probar los cambios. Una
solución es habilitar una serie de direcciones |IP| desde las que habilitar el
mantenimiento no tendrá efecto. Para ello necesitamos el módulo `geo
<http://nginx.org/en/docs/http/ngx_http_geo_module.html>`_ de
:program:`nginx`. El módulo puede ayudar a identificar los grupos de direcciones
|IP| que queremos que burlen el mantenimiento. Para ello, debe crearse:

.. code-block:: nginx

   # /etc/nginx/conf.d/adminip.conf
   geo $adminip {
      default           0;
      127.0.0.0/8       1;
      10.0.0.0/8        1;
      172.16.0.0/12     1;
      192.188.0.0/16    1;
   }

que identifica a los clientes que se conectan desde direcciones locales\ [#]_:
hecho lo cual, podemos modificar :file:`mantenimiento.conf` para que, cuando la
|IP| del cliente sea una de ellas, no tenga efecto el estado de mantemiento:

   .. literalinclude:: files/mantenimiento-ip.conf
      :language: nginx
      :emphasize-lines: 13-16

.. warning:: El módulo geo_ no está compilado estáticamente en el ejecutable,
   por lo que deberá comprobar si con su sabor de :program:`nginx` tiene
   instalado el paquete :deb:`libnginx-mod-http-geoip`.

.. rubric:: Notas al pie

.. [#] Podríamos, claro está, incluir también alguna dirección publica propia
   desde la que nos solemos conectar al servidor para administrarlo.


.. |HTML| replace:: :abbr:`HTML (HyperText Markup Language)`
.. |PHP| replace:: :abbr:`PHP (PHP Hypertext Preprocessor)`
