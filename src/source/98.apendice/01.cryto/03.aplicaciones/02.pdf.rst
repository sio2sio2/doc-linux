.. _firm-doc:

.. ¿Puede explicarse mejor en qué consiste la firma de documentos?
   https://pyhanko.readthedocs.io/en/latest/cli-guide/signing.html#some-background-on-pdf-signatures
   http://audentia-gestion.fr/ADOBE/DigitalSignaturesInPDF.pdf
   

Firma de documentos
*******************
Para la firma de documentos digitales existen varios estándares:

|CAdES|
   Consiste en generar un archivo de firma en formato ``.p7s`` (:ref:`formato
   PKCS #7 <cert-p7>`) que contiene la propia firma digital y, opcionalmente, el
   certificado firmante e incluso el propio documento firmado. Lo habitual, no
   obstante, es que no lo contenga y deban conservarse tanto el documento como
   este archivo de firma.

|XAdES|
   Es otro estándar que extiende `XML-DSig
   <https://es.wikipedia.org/wiki/Firma_XML>`_ y adopta el formato |XML| para
   expresar la información sobre la firma. Hay tres variantes que se diferencian
   por el modo en que se incluyen los datos firmados (en *Base64*) dentro del
   propio archivo:

   * *Detached*, que es la única variante que permite, si así se desea, no
     incorporar los datos.
   * *Enveloped*.
   * *Enveloping*, que sólo es apta para documentos |XML| ya que lo incluye
     dentro del archivo sin codificarlo en *Base64*.

|PAdES|
   Es una extensión del estańdar |PDF| que permite incrustar la información de
   firma en un objeto interno del propio documento |PDF|.

   .. note:: Aunque opcionalmente pueden generarse marcas visibles en el documento
      que denoten quién ha firmado y cuándo lo ha hecho, la firma digital en sí
      no deja huella visible en una impresión: se verifica utilizando una
      herramienta de verificación sobre el archivo.

   .. seealso:: Para conocer con mayor profundidad cómo se almacenan las firmas
      dentro de un |PDF| puede leer `el extenso libro blanco sobre firmas
      digitales <https://itextpdf.com/en/resources/books/digital-signatures-pdf>`_
      de Bruno Lowagie.

Al margen de la obviedad de que el último estándar sólo es válido para firmar
documentos |PDF|, mientras que los dos primeros permiten firmar cuálquier
documento, hay otra gran diferencia entre ellos: el último estándar incrusta la
firma en el propio |PDF| por lo que el archivo resultante sigue siendo
directamente visualizable. En cambio los dos primeros estandares o incrustan el
documento dentro del archivo de firma (con lo cual dejan de ser visualizables) o
ni siquiera lo incluyen u obligan a conservar el documento original (`firma
despegada <https://en.wikipedia.org/wiki/Detached_signature>`_).

.. note:: Autofirma_ es una aplicación que permite utilizar estos tres
   estándares para firmar documentos.

Otro aspecto importante a tener en cuenta es el procedimiento que se sigue
cuando son varios los que deben firmar un mismo documento. Hay dos estrategias:

+ La :dfn:`cofirma`, que ocurre cuando no hay jerarquía alguna entre los
  firmantes y es irrelevante el orden en que se realicen las firmas, ya que cada
  cual avala el contenido del documento y no las firmas de los demás.
+ La :dfn:`contrafirma` o :dfn:`firma en cascada`, que ocurre cuando sí hay
  jerarquía y un firmante de mayor jerarquía también avala la firma del firmante
  de menor jerarquía. En este caso, el orden sí es importante y las firmas deben
  realizarse de menor rango a mayor rango.

.. _firma-legal:

Estatus legal
=============
La validez legal de la firma digital está desarrollada en España a través de la
`Ley 6/2020`_, de 11 de noviembre, *reguladora de determinados aspectos de los
servicios electrónicos de confianza*, y  el `Reglamento eIDAS`_ (*Reglamento
910/2014*, conocidos por sus siglas en ingles |eIDAS|). La normativa establece
dos tipos de *prestadores de servicios de confianza* (esto es, de |CA|):

- :dfn:`Prestadores cualificados`, que son aquellos reconocidos como tales por
  un organismo supervisor\ [#]_. Las obligaciones a los que están sujetos se
  encuentran enumeradas en el artículo **9** de la `Ley 6/2020`_.
- :dfn:`Prestadores no cualificados`, que son aquellos que no gozan de este
  reconocimiento, aunque se encuentran inscritos para el ejercicio de su
  actividad.

Esta distinción origina que haya :dfn:`certificados digitales cualificados` y
:dfn:`certificados digitales no cualificados` y, consecuentemente, una
:dfn:`firma electrónica cualificada` y una :dfn:`firma electrónica no
cualificada`. La diferencia legal entre una y otra firma es que la primera tiene
los mismos efectos juridicos que la firma manuscrita, mientras que la segunda
no, aunque puede ser admitida en un juicio\ [#]_.

El Ministerio publica en su web la `lista de prestadores cualificados y no
cualificados de confianza
<https://avancedigital.mineco.gob.es/es-es/Servicios/FirmaElectronica/Paginas/Prestadores.aspx>`_.
Como todos los países de la Unión tiene la obligación de remitir estas listas,
es posible la `consulta de todos los prestadores europeos
<https://digital-strategy.ec.europa.eu/en/policies/eu-trusted-lists>`_.

.. _pdfsig:

|PAdES|
=======
Hay varias aplicaciones en Linux que permiten la firma y verificación de firmas
de documentos |PDF|:

* LibreOffice_ (dentro del menú "Archivo").
* MuPDF_\ [#]_.
* Poppler_ y todas las aplicaciones que lo tomen como base (Zathura_, Evince_)\ [#]_.
* Las proporcionadas por el Gobierno de España:

  - `Autofirma <https://firmaelectronica.gob.es/Home/Descargas.html>`_, escrita en *Java*,
    para la firma.
  - La página `Valide <https://valide.redsara.es/>`_, para validación  de
    documentos firmados con certificados expedidos por algunas |CA| reconocidas
    por el `Ministerio de Industria, Comercio y Turismo
    <https://mincotur.gob.es>`_. Esta página también ofrece la opción de firmar,
    pero lo hace, en realidad, recurriendo a un `Autofirma`_ que haya instalado
    en el sistema.
   
Nos centraremos en este apéndice práctico en el uso por línea de órdenes de
:manpage:`pdfsign`, una orden incluida dentro del paquete :deb:`poppler-utils`::

   # apt install poppler-utils

.. note:: El uso de las citadas utilidades del Gobierno no entraña mucha
   dificultad:

   + Autofirma_ se distribuye como un archivo :kbd:`.zip` que, entre otros,
     contiene un :ref:`paquete deb <paquetes-deb>`. La instalación de este
     paquete asegura que se satisfagan las dependencias y se asocie a la
     aplicación el tipo |MIME| ``x-scheme-handler/afirma`` que permite soportar
     el protocolo ``afirma://`` que usan las páginas oficiales cuando requieren
     firmar un documento.

   + La |FNMT|, que emite gratuitamente certificados personales, usa otra
     aplicación más, `Configurador FNMT-RCM
     <https://www.sede.fnmt.gob.es/descargas/descarga-software/instalacion-software-generacion-de-claves>`_,
     exclusivamente para el proceso de generación de certificados. Esta es la
     aplicación que se encarga de generar las claves, solicitar el certificado
     y, finalmente, recibirlo. También para ella hay un paquete *deb* que se
     encargará de satisfacer las dependencias y asociar el tipo |MIME|
     ``x-scheme-handler/fnmtcr`` que permite soportar el protocolo
     ``fnmtcr://``.

   .. warning:: En realidad, ambas aplicaciones son aplicaciones escritas en
      *Java*, pero no incluyen entre sus dependencias el intérprete, por lo
      que, si no lo tuviéramos ya instalado, no se instalará y las aplicaciones
      no funcionarán. Cerciórese, por tanto, de que lo tiene::

         # command -v java || apt install default-jre

   Una vez que complete la instalación de ambas aplicaciones, cerciórese
   de que el sistema es capaz de soportar los dos protocolos referidos::

      $ xdg-mime query default x-scheme-handler/fnmtcr
      configuradorfnmt.desktop
      $ xdg-mime query default x-scheme-handler/afirma
      afirma.desktop

   Para más información, consulte ":reF:`mimetypes`".

Validación
----------
La validez de la firma de un |PDF| se puede hacer del siguiente modo::

   $ pdfsig -nocert documento.pdf

La orden de arriba, sin embargo, no comprobará la fiabilidad del certificado
firmante (:kbd:`-nocert`). Para hacerlo, es necesario que el programa utilice
un catálogo de claves que disponga de toda la cadena de confianza. Este
catálogo es :ref:`un almacen NSS <cert-nss>` como los que usa Firefox_ o
Chromium_. Supuesto que dispongamos de ese catálogo, entonces podremos
comprobar la firma y cerciorarnos de la fiabilidad del certificado::

   $ pdfsig -nssdir ~/.pki/nssdb documento.pdf

.. seealso:: Consulte cómo crear, consultar y mantener un :ref:`catálogo NSS
   <cert-nss>`. En la orden de ejemplo se ha supuesto que se usa el catálogo
   creado por Chromium_.

Firma
-----
.. warning:: Para poder firmar documentos es necesario utilizar al menos la
   versión **21.01** de :deb:`poppler-utils`, y preferentemente al menos la
   **21.10** (o sea, al menos, *Bookworm*) que permite añadir un nuevo campo de
   firma.

Supuesto que dispongamos de un almacén |NSS| con nuestro certificado y su cadena
de confianza::

   $ pdfsig -nssdir ~/.pki/nssdb -add-signature -nick 'CADENA-EN-NSSDB-DEL-CERT' doc.pdf doc_firmado.pdf

|CAdES|
=======
Otro modo de firmar (en especial si el documento original no es un |PDF|) es el
estándar |CAdES|, que es básicamente el referido en el :rfc:`2315` y que ya
hemos citado al tratar el :ref:`formato PKCS #7 <cert-p7>`. 

Firma
-----
Partamos de que tenemos un documento (no necesariamente un |PDF|) y un
certificado personal (:file:`key.pem` y :file:`cert.pem`) con el que queremos
firmar tal documento::

   $ openssl smime -sign -in fichero.txt -inkey key.pem -outform DER -binary -signer cert.pem -out fichero.p7s

Esto generará un archivo de firma (:file:`fichero.p7s` en formato |DER|) que
contiene la firma en sí y también el propio certificado (lo que simplifica luego
la verificación). A partir de ahora tendríamos que almacenar tanto el archivo
(:file:`fichero.txt`) como la propia firma (:file:`fichero.p7s`).

.. warning:: Al archivo de firma, además de la propia firma, sólo se añade el
   certificado del firmante\ [#]_, aunque puedan existir otros certificados dentro de
   :file:`cert.pem` que completen la cadena de confianza. Si se desea añadir
   éstos también, deberán ponerse en archivo aparte y declararlo con la opción
   :kbd:`-certfile`::

      $ openssl smime -sign -in fichero.txt -inkey key.pem -outform DER -binary -signer cert.pem -certfile chain.pem -out fichero.p7s

.. openssl pkcs7 -inform der -in firma.p7s -print_certs

Validación
----------
La verificación consiste en tomar el archivo de firma (:file:`fichero.p7s`), que
suponemos que contiene el certificado firmante, y el archivo que se firmó
(:file:`fichero.txt`)::

   $ openssl smime -verify -inform DER -in fichero.p7s -content fichero.txt -purpose any -binary > /dev/null
   Verification successful

.. warning:: La verificación exige que la cadena de confianza esté completa. Si
   :file:`fichero.p7s` no contiene el certificado del firmante, habrá que
   referirlo a través de :kbd:`-certfile` y, si existen autoridades intermedias,
   deberemos incluir sus certificados mediante :kbd:`-CAfile`.

.. note:: El archivo `.p7s` es capaz de contener el archivo firmado. Si este
   fuera el caso, bastaría con no usar la opción :kbd:`-content`.

.. _como-firma-junta:

Firma en las administraciones públicas\ [#]_
============================================
El |ENI| incluye como parte de la interoperabilidad entre las administraciones
públicas españolas un sistema de firma digital que no es exactamente ninguno de
los anteriormente explicados y que se aplica en la firma de solicitudes,
publicación de instrucciones, etc.

Básicamente consiste en lo siguiente:

+ El proceso de firma genera un archivo de firma |XML| de formato propio (el
  `formato ENI
  <https://www.hacienda.gob.es/SGT/catalogo_sefp/245_20150112_eni_xsd_manual_de_usuario_esquema_2_f.pdf>`_) que contiene la firma
  en alguno de los formatos estándar ya referidos. El propio archivo contiene
  también los datos firmados.
+ No se facilita directamente este archivo de firma, sino que éste y una copia
  del documento original se almacenan en un servidor y al usuario se le
  proporciona una |URL| y un código de verificación, que actúa básicamente como
  identificador con el que el usuario posteriormente puede obtener de la |URL|
  el archivo |ENI|.
+ Para facilitar el código de verificación se modifica el contenido del |PDF|
  original incluyendolo como pie en todas las páginas del documento. Este nuevo
  |PDF| es el que se proporciona al usuario como resultado del proceso de firma.
  Consecuentemente, el usuario obtiene un |PDF| que en realidad no contiene la
  información de firma, sino la información de cómo obtenerla.

.. warning:: Nótese que a pesar de que esta estrategia, en principio, debería
   permitir el uso de cualquier formato de documento, este paso de modificar el
   archivo original para incluir el código obliga a que el archivo sea un |PDF|
   ya que el sistema se ha preparado para modificar un archivo de este tipo.

Por tanto, si el usuario quiere verificar el documento deberá acceder a la |URL|
proporcionada y facilitar el código de verificación, lo que le dará acceso al
documento |ENI| que, éste sí, contiene la información de firma. La verificación
por su parte puede hacerse destripando dicho documento o acudiento a `este
servicio web nacional
<https://sede.administracion.gob.es/pagSedeFront/servicios/peticionENI.htm>`_,
que hace el trabajo por nosotros si le proporcionamos el |ENI|.

Esta estrategia tiene sus ventajas e inconvenientes respecto a una firma basada
en |PAdES|:

**Ventajas**
   * En principio, con esta estrategia se puede firmar cualquier tipo de
     documento, ya que el formato no tiene que haber considerado un modo de
     incrustar en sus metadatos la firma. En la práctica, si se hace a través de
     uno de estos servicios y no de forma manual, es probable que sólo se puedan
     firmar archivos |PDF|, ya que el servicio debe manipular el archivo original para
     incluir la información de verificación y, posiblemente, sólo se haya
     preparado para alterar documentos |PDF|.
   * Si se imprime el documento en papel, aún sabremos que se firmó y cómo
     verificarlo, ya que podremos ver en la copia de papel el código de
     verificación y la |URL| a la que acceder.

**Desventajas**
   * El propio documento no contiene la información de firma, sino que ésta se
     halla almacenada externamente.
   * La información de firma se encuentra alamacenada en un servidor ajeno,
     por lo que dependeremos de que el organismo conserve tal
     información, ya que de lo contrario será imposible llevar a cabo la
     verificación. En principio, podríamos soslayar este problema descargando el
     archivo original y el de firma en cuanto hubiéramos firmado, en vez de
     confiar en que tales archivos se conserven siempre en el servidor remoto.
   * Las comprobaciones se hacen con el archivo |ENI| que contiene el archivo
     original, por lo que la verificación no asegura que el archivo resultante
     de la firma no haya sido modificación maliciosamente con posterioridad. Por
     tanto, habrá también que cotejar visualmente que la única diferencia entre
     el original y el modificado es la información adicional de verificación.

Para ilustrar el procedimiento tomemos un documento firmado por la
administración andaluza. Por ejemplo, las `Instrucciones para regular aspectos
relativos a la organización y el funcionamiento [de a Formación Profesional]
para el curso 2024/2025
<https://www.juntadeandalucia.es/educacion/portals/web/inspeccion-educativa/normativa/-/normativas/detalle/resolucion-de-26-de-junio-de-2024-de-la-direccion-general-de-formacion-profesional-por-la-que-se-dictan-instrucciones>`_.
De un simple vistazo, sabemos que están firmadas porque todas las páginas tienen
este pie:

.. image:: files/info-ver.png

que es precisamente el contenido que se añade al original como consecuencia del
proceso de firma. Trae información de quién lo firmó y cuándo, pero lo realmente
sustancioso es que incluye una |URL| y un código de verificación (o un código
|QR| con esa misma información). Al acceder a `esa URL
<https://ws050.juntadeandalucia.es/verificarFirma/>`_, podremos escribir el
código de verificación y obtendremos lo siguiente:

.. image:: files/arc-ver.png

Se nos indica que la firma es válida (lo cual podemos creer o no), quién y cuándo
firmó (aunque eso eran datos que ya proporcionaba el pie añadido); y sobre todo
el archivo original (que si lo descargamos podremos comprobar que es idéntico,
pero no contiene el pie informativo) y un documento |ENI| del que podemos
extraer el archivo de firma ``.p7s``, ya que se encuentra contenido en uno de
sus elementos::

   $ cat <<EOF > firma.p7s
   -----BEGIN PKCS7-----
   $(xmlstarlet sel -B -t -v '//enids:FirmaConCertificado' documentoENI.xml)
   -----END PKCS7-----
   EOF

Con ambos archivos podemos hacer la comprobación::

   $ openssl smime -verify -inform PEM -in firma.p7s -content original.pdf -purpose any -binary > /dev/null
   Verification successful

.. note:: En las órdenes :file:`documentoENI.xml` es el |XML| descargado y
   :file:`original.pdf` el |PDF| original también descargado.


.. rubric:: Notas al pie

.. [#] La `Secretaria de Estado de Telecomunicaciones e
   Infraestructuras Digitales`_ dependiente del `Ministerio de Asuntos Económicos
   y Transformación Digital`_. La variabilidad política hará que este párrafo
   quede pronto obsoleto y el nombre del Ministerio y de la Secretaría de Estado
   cambie de nombre y *dirección web*.

.. [#] Puede hacerse una lectura del artículo `Terceros de confianza y
   certificación de prueba electrónica. Una nueva frontera en materia de
   probática <http://e-procesal.com/dterceros-de-confianza-y-certificacion-de-prueba-electronica-una-nueva-frontera-en-materia-de-probatica-2109>`_.

.. [#] Aunque el soporte parece deficiente y no permitir la adición de un objeto
   de firma. La `escasa documentación
   <https://mupdf.readthedocs.io/en/latest/mutool-sign.html>`_ no contribuye a
   aclararlo.

.. [#] En realidad, :program:`Poppler` a través de :ref:`pdfsig <pdfsig>` lo
   permite, pero a fecha de redacción (abril de 2022) las aplicaciones
   derivadas, no.

.. [#] Y lo contiene porque no hemos incluido la opción :kbd:`-nocerts`. Si lo
   hubiéramos hecho, el archivo contendría extrictamente la firma sin ningún
   certificado.

.. [#] Las administraciones públicas españolas, se entiende.

.. |PDF| replace:: :abbr:`PDF (Portable Dcument Format)`
.. |NSS| replace:: :abbr:`NSS (Network Secure Services)`
.. |CA| replace:: :abbr:`CA (Certification Authority)`
.. |PKCS| replace:: :abbr:`PKCS (Public-Key Cryptography Standards)`
.. |eIDAS| replace:: :abbr:`eIDAS (Electronic IDentification, Authentication and trust Services)`
.. |MIME| replace:: :abbr:`MIME (Multipurpose Internet Mail Extensions)`
.. |FNMT| replace:: :abbr:`FNMT (Fábrica Nacional de Moneda y Timebre)`
.. |DER| replace:: :abbr:`DER (Distinguised Enconding Rules)`
.. |URL| replace:: :abbr:`URL (Uniform Resource Locator)`
.. |QR| replace:: :abbr:`QR (Quick Response)`
.. |XML| replace:: :abbr:`XML (eXtensible Markup Language)`
.. |ENI| replace:: :abbr:`ENI (Esquema Nacional de Interoperabilidad)`
.. |CAdES| replace:: :abbr:`CAdES (CMS Advanced Electronic Signatures)`
.. |XAdES| replace:: :abbr:`XAdES (XML Advanced Electronic Signatures)`
.. |PAdES| replace:: :abbr:`PAdES (PDF Advanced Electronic Signatures)`

.. _LibreOffice: https://www.libreoffice.org
.. _MuPDF: https://mupdf.com
.. _Poppler: https://poppler.freedesktop.org
.. _Zathura: https://pwmt.org/projects/zathura
.. _Evince: https://wiki.gnome.org/Apps/Evince
.. _Ley 6/2020: https://www.boe.es/eli/es/l/2020/11/11/6/con
.. _Reglamento eIDAS: https://www.boe.es/buscar/doc.php?id=DOUE-L-2014-81822
.. _Ministerio de Asuntos Económicos y Transformación Digital: https://portal.mineco.gob.es/es-es/Paginas/default.aspx
.. _Secretaria de Estado de Telecomunicaciones e Infraestructuras Digitales: https://avancedigital.mineco.gob.es/es-es/Paginas/index.aspx
.. _Firefox: https://www.mozilla.org
.. _Chromium: https://www.chromium.org
