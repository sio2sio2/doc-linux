.. _nginx-debcache:

Caché de paquetes
=================
Cuando se requiere actualizar muchos ordenadores de la red local, la descarga de
paquetes puedo suponer un gran tráfico de red. Una solución para evitarlo crear
un repositorio completo, pero por lo general sólo se instalan una ínfima parte
de los paquetes de la distribución con que descargamos y sincronizamos muchos
paquetes que no son totalmente inútiles.

Una solución alternativa es crear un *proxy*\ [#]_ caché para almacenar los
paquetes de descargados; asi sólo la primera instación requerirá descargarlos de
internet y las siguientes se limitarán a obtenerlos del *proxy*.
:program:`nginx` nos permite hacerlo como por otro lado nos lo permitiría
:ref:`squid <squid>`).

La idea es modificar el fichero :file:`sources.list` de manera que las líneas
que se escriben así::

   deb http://ftp.fr.debian.org/debian/ stretch  main

pasen a estar escritas así::

   deb http://debian-cache.example.net/ftp.fr.debian.org/debian/ stretch  main

es decir, la línea es igual pero insertando el nombre de nuestro *proxy* al
nombre de la máquina del reposito de *debian*. De este modo, el gestor de
paquetes contactará con nuestro :program:`nginx` y éste será capaz de conocer
cuál es el repositorio y la ruta al recurso, simplemente transformando el primer
directorio en el nombre del repositorio.

Para ello lo primero es crear un directorio de almacenamiento para las
descargas::

   # mkdir -p /var/cache/nginx
   # chown www-data /var/cache/nginx

Y ahora definir cómo es esta caché en :file:`/etc/nginx/conf.d/cache.conf`:

.. literalinclude:: files/cached.conf
   :language: nginx

cuyo contenido supone que:

* Almacenaremos todos los datos en :file:`/var/cache/nginx/debcache`.
* La caché la podremos referir luego como *debcache*.
* Dispondrá de un tamaño máximo de 500 MB. Si se supera este tamaño, para
  respetar este límite, se empezarán a eliminar contenidos empezando por
  aquellos cuyo tiempo de acceso es más antiguo.
* Los contenidos permanecerán 14 días almacenados. Superado este tiempo, se
  eliminarán.

Por último debemos crear el dominio virtual (que hemos llamado
*debian-cache.example.net*) con :download:`esta configuracion
<files/site-cache>`:

.. literalinclude:: files/site-cache
   :language: nginx

Actúa como *proxy* entre el repositorio de *debian* y el cliente usando la
caché. Ahora bien, almacenar durante mucho tiempo la lista de paquetes no
es muy recomendable, porque si un paquete se actualiza en el repositorio, pero
nuestra lista no, el cliente intentará obtener una versión antigua del paquete y
se encontrará con un error **404**. Por ello configuramos del siguiente modo:

* Los ficheros cacheados que no son paquetes *debian* se considerarán inválidos
  después de 8 horas, o sea, una jornada de trabajo. Si se detectan muchos
  errores **404** como consecuencia de la desincronización con el repositorio,
  se puede disminuir este tiempo a costa de que sean necesarias más
  actualizaciones remotas de las listas de paquetes el mismo día.
* Los paquetes, en cambio, se consideran válidos durante 14 días. A diferencia
  del caso anterior que un paquete cacheado se vuelva obsoleto, no supone un
  error, ya que el cliente descargará el nuevo paquete. La única desventaja es
  que cachearemos la versión antigua y la nueva y ocuparemos espacio de disco
  innecesariamente.

.. https://www.linuxito.com/gnu-linux/nivel-alto/943-crear-una-cache-de-paquetes-de-debian-con-nginx
   http://tdt.rocks/repo_cache_ft_nginx.html
   https://raymii.org/s/tutorials/NGINX_proxy_folder_to_different_root.html

.. rubric:: Notas al pie

.. [#] Aunque es mucho mas sencillo, si no necesitamos instalar :program:`nginx` por
   otra razón, usar `apt-cacher-ng
   <https://www.tecmint.com/apt-cache-server-in-ubuntu/>`_.
