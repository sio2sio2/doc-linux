.. _firm-doc:

.. ¿Puede explicarse mejor en qué consiste la firma de documentos?
   https://pyhanko.readthedocs.io/en/latest/cli-guide/signing.html#some-background-on-pdf-signatures
   http://audentia-gestion.fr/ADOBE/DigitalSignaturesInPDF.pdf
   

Firma de documentos
*******************
Para firmar documentos existen dos vías basadas en :ref:`certificados digitales
X.509 <cert-digital>`:

* Si el documento tiene formato |PDF|, este estándar permite integrar en un
  objeto interno la firma dentro del propio documento, razón por la cual --junto
  a la de ser independiente su aspecto de la plataforma\ -- se utiliza muy
  comúnmente para la formalización digital de contratos, solicitudes,
  promulgación de leyes, etc. que requieren validez legal.

  .. note:: Aunque opcionalmente pueden generarse marcas visibles en el documento
     que denoten quién ha firmado y cuándo lo ha hecho, la verdadera firma digital
     no deja huella visible en una impresión: se verifica utilizando una
     herramienta de verificación sobre el archivo.

  Al estar integrada la firma dentro del propio documento, el algoritmo debe:

  + calcular el :ref:`resumen <hash>` de todo el documento, exceptuando el
    contenido de la propia firma\ [#]_.

  + permitir adjuntar sucesivamente distintas firmas. Tenga presente, no obstante,
    que una de las firmas, no incluiría en su resumen los añadidos que suponen las
    que se hayan hecho después. Consecuentemente, el orden en que se firme es
    importante si los firmantes tienen distinta jerarquía: lo lógico, pues, es que
    firme primero el que tenga menos jerarquía, después el supervisor del primer
    firmante y así sucesivamente.

  .. seealso:: Para conocer con mayor profundidad cómo se almacenan las firmas
     dentro de un |PDF| puede leer `el extenso libro blanco sobre firmas
     digitales <https://itextpdf.com/en/resources/books/digital-signatures-pdf>`_
     de Bruno Lowagie.

* Sea cual sea el documento (o flujo de datos), puede generarse un archivo
  independiente de firma que contiene el resumen cifrado junto a metainformación
  sobre el proceso. Es lo que se llama `firma independiente
  <https://en.wikipedia.org/wiki/Detached_signature>`_. De modo muy
  rudimentario, esto fue lo que se hizo anteriormente :ref:`al presentar el concepto
  de firma <firma-digital>`. Este método es el que se usa en la :ref:`firma de
  correos electrónicos <email-seguro>`, pero también puede usarse para firmar
  documentos.

.. _firma-legal:

Estatus legal
=============
La validez legal de la firma digital está desarrollada en España a través de la
`Ley 6/2020`_, de 11 de noviembre, *reguladora de determinados aspectos de los
servicios electrónicos de confianza*, y  el `Reglamento eIDAS`_ (*Reglamento
910/2014*, conocidos por sus siglas en ingles |eIDAS|). La normativa establece
dos tipos de *prestadores de servicios de confianza* (esto es, de |CA|):

- :dfn:`Prestadores cualificados`, que son aquellos reconocidos como tales por
  un organismo supervisor\ [#]_. Las obligaciones a los que están sujetos se
  encuentran enumeradas en el artículo **9** de la `Ley 6/2020`_.
- :dfn:`Prestadores no cualificados`, que son aquellos que no gozan de este
  reconocimiento, aunque se encuentran inscritos para el ejercicio de su
  actividad.

Esta distinción origina que haya :dfn:`certificados digitales cualificados` y
:dfn:`certificados digitales no cualificados` y, consecuentemente, una
:dfn:`firma electrónica cualificada` y una :dfn:`firma electrónica no
cualificada`. La diferencia legal entre una y otra firma es que la primera tiene
los mismos efectos juridicos que la firma manuscrita, mientras que la segunda
no, aunque puede ser admitida en un juicio\ [#]_.

El Ministerio publica en su web la `lista de prestadores cualificados y no
cualificados de confianza
<https://avancedigital.mineco.gob.es/es-es/Servicios/FirmaElectronica/Paginas/Prestadores.aspx>`_.
Como todos los países de la Unión tiene la obligación de remitir estas listas
también es posible la `consulta de todos los prestadores europeos
<https://digital-strategy.ec.europa.eu/en/policies/eu-trusted-lists>`_.

.. _pdfsig:

Firma integrada
===============
Hay varias aplicaciones en Linux que permiten la firma y verificación de firmas
de documentos |PDF|:

* LibreOffice_ (dentro del menú "Archivo").
* MuPDF_\ [#]_.
* Poppler_ y todas las aplicaciones que lo tomen como base (Zathura_, Evince_)\ [#]_.
* Las proporcionadas por el Gobierno de España:

  - `Autofirma <https://firmaelectronica.gob.es/Home/Descargas.html>`_, escrita en *Java*,
    para la firma.
  - La página `Valide <https://valide.redsara.es/>`_, para validación  de
    documentos firmados con certificados expedidos por algunas |CA| reconocidas
    por el `Ministerio de Industria, Comercio y Turismo
    <https://mincotur.gob.es>`_. Esta página también ofrece la opción de firmar,
    pero lo hace, en realidad, recurriendo a un `Autofirma`_ que haya instalado
    en el sistema.
   
Nos centraremos en este apéndice práctico en el uso por línea de órdenes de
:manpage:`pdfsign`, una orden incluida dentro del paquete :deb:`poppler-utils`::

   # apt install poppler-utils

.. note:: El uso de las citadas utilidades del Gobierno no entraña mucha
   dificultad:

   + Autofirma_ se distribuye como un archivo :kbd:`.zip` que, entre otros,
     contiene un :ref:`paquete deb <paquetes-deb>`. La instalación de este
     paquete asegura que se satisfagan las dependencias y se asocie a la
     aplicación el tipo |MIME| ``x-scheme-handler/afirma`` que permite soportar
     el protocolo ``afirma://`` que usan las páginas oficiales cuando requieren
     firmar un documento.

   + La |FNMT|, que emite gratuitamente certificados personales, usa otra
     aplicación más, `Configurador FNMT-RCM
     <https://www.sede.fnmt.gob.es/descargas/descarga-software/instalacion-software-generacion-de-claves>`_,
     exclusivamente para el proceso de generación de certificados. Esta es la
     aplicación que se encarga de generar las claves, solicitar el certificado
     y, finalmente, recibirlo. También para ella hay un paquete *deb* que se
     encargará de satisfacer las dependencias y asociar el tipo |MIME|
     ``x-scheme-handler/fnmtcr`` que permite soportar el protocolo
     ``fnmtcr://``.

   .. warning:: En realidad, ambas aplicaciones son aplicaciones escritas en
      *Java*, pero no incluyen entre sus dependencias el intérprete, por lo
      que, si no lo teníamos ya instalado, no se instalará y las aplicaciones no
      funcionarán. Cerciórese, por tanto, de que lo tiene::

         # command -v java || apt install default-jre

   Una vez que complete la instalación de ambas aplicaciones, cerciórese
   de que el sistema es capaz de soportar los dos protocolos referidos::

      $ xdg-mime query default x-scheme-handler/fnmtcr
      configuradorfnmt.desktop
      $ xdg-mime query default x-scheme-handler/afirma
      afirma.desktop

   Para más información, consulte ":reF:`mimetypes`".

Validación
----------
La validez de la firma de un |PDF| se puede hacer del siguiente modo::

   $ pdfsig -nocert documento.pdf

La orden de arriba, sin embargo, no comprobará la fiabilidad del certificado
firmante (:kbd:`-nocert`). Para hacerlo, es necesario que el programa utilice
un catálogo de claves que disponga de toda la cadena de confianza. Este
catálogo es :ref:`un almacen NSS <cert-nss>` como los que usa Firefox_ o
Chromium_. Supuesto que dispongamos de ese catálogo, entonces podremos
comprobar la firma y cerciorarnos de la fiabilidad del certificado::

   $ pdfsig -nssdir ~/.pki/nssdb documento.pdf

.. seealso:: Consulte cómo crear, consultar y mantener un :ref:`catálogo NSS
   <cert-nss>`. En la orden de ejemplo se ha supuesto que se usa el catálogo
   creado por Chromium_.

Firma
-----
.. warning:: Para poder firmar documentos es necesario utilizar al menos la
   versión **21.01** de :deb:`poppler-utils`, y preferentemente al menos la
   **21.10** (o sea, al menos, *Bookworm*) que permite añadir un nuevo campo de
   firma.

Supuesto que dispongamos de un almacén |NSS| con nuestro certificado y su cadena
de confianza::

   $ pdfsig -nssdir ~/.pki/nssdb -add-signature -nick 'CADENA-EN-NSSDB-DEL-CERT' doc.pdf doc_firmado.pdf

Firma independiente
===================
La otra estrategia para la firma digital es generar archivos independientes de
firma. En este caso, el estándar más habitual es el referido en el :rfc:`2315` y
que ya hemos citado al tratar el :ref:`formato PKCS #7 <cert-p7>`. 

Aunque un usuario puede firmar y verificar de forma manual (acciones que
veremos después), lo habitual es que los organismos que utilizan esta estrategia
obren del siguiente modo:

+ La firma de un documento genera un documento modificado que es igual al
  original, pero que además contiene de forma *visible* un código de
  verificación y una |URL| donde se puede llevar a cabo la verificación de la
  firma.

  .. note:: Nótese que este documento está modificado y, por tanto, no será el
     que verifique el archivo de firma.

+ El archivo original y el de firma se almacenan en un servidor al que se accede
  a través del servicio de verificación,

De esto modo, el usuario que desea comprobar la veracidad del documento debe
ingresar en el servicio de verificación y usar el código de verificación. El
servicio le proporcionará el archivo original y el de firma y, adicionalmente,
podrá llevar a cabo la comprobación de la firma. comprobación que, en cualquier
caso, podrá hacer el propio usuario con los dos archivos que se le proporcionan.

.. seealso:: La Junta de Andalucía utiliza este mecanismo de firma electrónica para
   sus documentos. :ref:`Más adelante lo trataremos <como-firma-junta>` y
   se ilustrará cómo en particular se hace todo lo indicado más arriba.

Esta segunda estrategia que utilizan los organismos tiene sus ventajas e
inconvenientes frente a la de firma integrada:

**Ventajas**
   * En principio, con esta estrategia se puede firmar cualquier tipo de
     documento, ya que el formato no tiene que haber considerado un modo de
     incrustar en sus metadatos la firma. En la práctica, si se hace a través de
     uno de estos servicios y no de forma manual, es probable que sólo se puedan
     firmar archivos |PDF|, ya que el servicio debe manipular el archivo original para
     incluir la información de verificación y, posiblemente, sólo se haya
     preparado para alterar documentos |PDF|.
   * Si se imprime el documento en papel, aún sabremos que se firmó y cómo
     verificarlo, ya que podremos ver en la copia de papel el código de
     verificación y la |URL| a la que acceder.

**Desventajas**
   * El propio documento no contiene la información de firma, sino que esta se
     halla almacenada externamente.
   * Cuando se utiliza un servicio, este almacenamiento externo es un servidor
     ajeno, por lo que dependeremos de que el organismo conserve tal
     información, ya que de lo contrario será imposible llevar a cabo la
     verificación. En principio, podríamos soslayar este problema descargando el
     archivo original y el de firma en cuanto hubiéramos firmado, en vez de
     confiar en que tales archivos se conserven siempre en el servidor remoto.
   * La verificación se hace con el archivo original, no con el modificado.
     Alguien malintencionado podría haber hecho cambios adicionales en el
     modificado, por lo que deberíamos cotejar visualmente que la única
     diferencia entre el original y el modificado es la información adicional de
     verificación.

Firma
-----
Partamos de que tenemos un documento (no necesariamente un |PDF|) y un
certificado personal (:file:`key.pem` y :file:`cert.pem`) con el que queremos
firmar tal documento::

   $ openssl smime -sign -in fichero.txt -inkey key.pem -outform DER -binary -signer cert.pem -out fichero.p7s

Esto generará un archivo de firma (:file:`fichero.p7s` en formato |DER|) que
contiene la firma en sí y también el propio certificado (lo que simplifica luego
la verificación). A partir de ahora tendríamos que almacenar tanto el archivo
(:file:`fichero.txt`) como la propia firma (:file:`fichero.p7s`).

.. warning:: Al archivo de firma, además de la propia firma, sólo se añade el
   certificado del firmante\ [#]_, aunque puedan existir otros certificados dentro de
   :file:`cert.pem` que completen la cadena de confianza. Si se desea añadir
   éstos también, deberán ponerse en archivo aparte y declararlo con la opción
   :kbd:`-certfile`::

      $ openssl smime -sign -in fichero.txt -inkey key.pem -outform DER -binary -signer cert.pem -certfile chain.pem -out fichero.p7s

.. openssl pkcs7 -inform der -in firma.p7s -print_certs

Verificación
------------
La verificación consiste en tomar el archivo de firma (:file:`fichero.p7s`), que
suponemos que contiene el certificado firmante, y el archivo que se firmó
(:file:`fichero.txt`)::

   $ openssl smime -verify -inform DER -in fichero.p7s -content fichero.txt -purpose any -binary > /dev/null
   Verification successful

.. warning:: La verificación exige que la cadena de confianza esté completa. Si
   :file:`fichero.p7s` no contiene el certificado del firmante, habrá que
   referirlo a través de :kbd:`-certfile` y, si existen autoridades intermedias,
   deberemos incluir sus certificados mediante :kbd:`-CAfile`.

.. _como-firma-junta:

Cómo firma la Junta de Andalucía
--------------------------------
En realidad, este procedimiento es común a las administraciones públicas (al
menos las españolas). Por ejemplo, `la Comunidad de Madrid también lo practica
<https://sede.comunidad.madrid/codigo-seguro-verificacion>`_.

Tomemos un documento firmado por la administración. Por ejemplo, tomemos las
`Instrucciones para regular aspectos relativos a la organización y el
funcionamiento  del curso 2024/2025
<https://www.juntadeandalucia.es/educacion/portals/web/inspeccion-educativa/normativa/-/normativas/detalle/resolucion-de-26-de-junio-de-2024-de-la-direccion-general-de-formacion-profesional-por-la-que-se-dictan-instrucciones>`_.
De un simple vistazo, sabemos que están firmadas porque todas las páginas tienen
este pie:

.. image:: files/info-ver.png

que es precisamente el contenido que se añade al original como consecuencia del
proceso de firma. Trae información de quién lo firmó y cuándo, pero lo realmente
sustancioso es que incluye una |URL| y un código de verificación (o un código
|QR| con esa misma información). Al acceder a `esa URL
<https://ws050.juntadeandalucia.es/verificarFirma/>`_, podremos escribir el
código de verificación y obtendremos lo siguiente:

.. image:: files/arc-ver.png

Se nos indica que la firma es válida, lo cual podemos creer o no, quién y cuándo
firmó (aunque eso eran datos que ya proporcionaba el pie añadido); y sobre todo
el archivo original (que si lo descargamos podremos comprobar que es idéntico,
pero no contiene el pie informativo) y un documento |XML| del que podemos
extraer el archivo de firma ``.p7s``, ya que se encuentra contenido en uno de
sus elementos::

   $ cat <<EOF > firma.p7s
   -----BEGIN PKCS7-----
   $(xmlstarlet sel -B -t -v '//enids:FirmaConCertificado' firma.xml)
   -----END PKCS7-----
   EOF

Con ambos archivos podemos hacer la comprobación::

   $ openssl smime -verify -inform PEM -in firma.p7s -content original.pdf -purpose any -binary > /dev/null
   Verification successful

.. note:: En las órdenes :file:`firma.xml` es el |XML| descargado y
   :file:`original.pdf` el |PDF| original también descargado.

.. rubric:: Notas al pie

.. [#] Obviamente, ya que de lo contrario el contenido de la firma dependería
   del propio resumen que forma parte del contenido.

.. [#] La `Secretaria de Estado de Telecomunicaciones e
   Infraestructuras Digitales`_ dependiente del `Ministerio de Asuntos Económicos
   y Transformación Digital`_. La variabilidad política hará que este párrafo
   quede pronto obsoleto y el nombre del Ministerio y de la Secretaría de Estado
   cambie de nombre y *dirección web*.

.. [#] Puede hacerse una lectura del artículo `Terceros de confianza y
   certificación de prueba electrónica. Una nueva frontera en materia de
   probática <http://e-procesal.com/dterceros-de-confianza-y-certificacion-de-prueba-electronica-una-nueva-frontera-en-materia-de-probatica-2109>`_.

.. [#] Aunque el soporte parece deficiente y no permitir la adición de un objeto
   de firma. La `escasa documentación
   <https://www.mupdf.com/docs/manual-mutool-sign.html>`_ no contribuye a
   aclararlo.

.. [#] En realidad, :program:`Poppler` a través de :ref:`pdfsig <pdfsig>` lo
   permite, pero a fecha de redacción (abril de 2022) las aplicaciones
   derivadas, no.

.. [#] Y lo contiene porque no hemos incluido la opción :kbd:`-nocerts`. Si lo
   hubiéramos hecho, el archivo contendría extrictamente la firma sin ningún
   certificado.

.. |PDF| replace:: :abbr:`PDF (Portable Dcument Format)`
.. |NSS| replace:: :abbr:`NSS (Network Secure Services)`
.. |CA| replace:: :abbr:`CA (Certification Authority)`
.. |PKCS| replace:: :abbr:`PKCS (Public-Key Cryptography Standards)`
.. |eIDAS| replace:: :abbr:`eIDAS (Electronic IDentification, Authentication and trust Services)`
.. |MIME| replace:: :abbr:`MIME (Multipurpose Internet Mail Extensions)`
.. |FNMT| replace:: :abbr:`FNMT (Fábrica Nacional de Moneda y Timebre)`
.. |DER| replace:: :abbr:`DER (Distinguised Enconding Rules)`
.. |URL| replace:: :abbr:`URL (Uniform Resource Locator)`
.. |QR| replace:: :abbr:`QR (Quick Response)`
.. |XML| replace:: :abbr:`XML (eXtensible Markup Language)`

.. _LibreOffice: https://www.libreoffice.org
.. _MuPDF: https://mupdf.com
.. _Poppler: https://poppler.freedesktop.org
.. _Zathura: https://pwmt.org/projects/zathura
.. _Evince: https://wiki.gnome.org/Apps/Evince
.. _Ley 6/2020: https://www.boe.es/eli/es/l/2020/11/11/6/con
.. _Reglamento eIDAS: https://www.boe.es/buscar/doc.php?id=DOUE-L-2014-81822
.. _Ministerio de Asuntos Económicos y Transformación Digital: https://portal.mineco.gob.es/es-es/Paginas/default.aspx
.. _Secretaria de Estado de Telecomunicaciones e Infraestructuras Digitales: https://avancedigital.mineco.gob.es/es-es/Paginas/index.aspx
.. _Firefox: https://www.mozilla.org
.. _Chromium: https://www.chromium.org
