.. _blockchain:

Tecnología *Blockchain*
***********************
Una de las aplicaciones de la criptografía que más impulso ha tomado en los
últimos años es la tecnología de **blockchain** (o de *cadena de bloques*, si
usamos su traducción literal). Conceptualmente fue desarrollada en los años 80
y 90, pero su florecimiento definitivo se produjo a partir de 2009 a raíz de la
creación del Bitcoin_. El 1 de noviembre de 2008, una persona (o un grupo de
personas), bajo el seudónimo de `Natoshi Nakamoto`_, anunció en un grupo de
noticias sobre cifrado (*gmane.comp.encryption.general*) la redacción de `un
artículo <https://bitcoin.org/bitcoin.pdf>`_ en que propugnaba la creación
de una divisa de dinero electrónico: el *Bitcoin*. Para ello había registrado
previamente el dominio `bitcoin.org`_, creó el *software* para implementarlo y
el 3 de enero de 2009 lanzó la red basada en el protocolo propuesto. Desde
entonces, *Bitcoin* y muchas otras criptomonedas nacidas después han
experimentado un desarrollo espectacular, y ya han excedido el ámbito puramente
informático. Aunque su efecto económico (y especulativo) es enormemente
interesante, el epígrafe se centra en los aspectos técnicos de la tecnología.

Propósito
=========
La :dfn:`blockchain` es una tecnología que permite la realización de transacciones
fiables entre particulares, evitando la necesidad de que exista una
autoridad que tutele el intercambio. Estas transacciones no tienen por qué ser
exclusivamente de divisa (ya veremos los distintos :ref:`tipos de criptomoneda
<crypto-tipos>`). El párrafo que acabamos de redactar, más que una definición,
es la declaración de su finalidad; y exige el registro de todas esas
transacciones:

.. image:: files/red-desc.png

El esquema nos ayudará a entender el funcionamiento:

* Por un lado, hay una serie de **clientes** o usuarios interesados en realizar
  transacciones entre ellos de manera segura y confiable: son el señor **A**, el
  señor **B** y el señor **C**.

* Por otro, se encuentran aquellos nodos que gestionan el libro de contabilidad
  distribuido en el que se registran las transacciones. Téngase presente que,
  como se quiere evitar la dependencia de cualquier agente particular, entonces
  la base de datos debe ser distribuida y el acceso a formar parte de ella,
  libre. Los nodos que gestionan la red distribuida se denominan
  **mineros**, ya veremos por qué razón y contienen una copia completa de todas
  las transacciones.

* Por último, existe otro agente: el **código** que implementa el protocolo y que
  define las reglas de intercambio, por lo cual, en un esquema tradicional
  cumpliría la función del *regulador*. Como el código es escrito por los
  **desarrolladores** puede parecer que la red funciona a su capricho, pero no
  es tal: los desarrollos suelen ser de :ref:`software libre <free-software>` y
  que sus cambios realmente se implemeten depende de que los adopten los
  mineros. En consecuencia, el que las reglas cambien acaba siendo una decisión
  consensuada.

  .. note:: Si ante un cambio no existe un consenso absoluto, entonces se
     produce lo que se llama un :dfn:`hard fork` y una parte de la red de
     mineros implementará un protocolo y, otra parte, el otro. Para las
     implicaciones de esto, échele un vistazo al `vídeo sobre hard fork de
     Crypto Español
     <https://www.youtube.com/channel/UC_TmOIPWu-hCVuE2fA3M8Tg>`_. Conviene
     antes, no obstante, leer el siguiente epígrafe donde se expone formalmente
     lo que es una *cadena de bloques*.

Por tanto, se siguen las reglas definidas en el *software* de gestión y los
interesados en hacer transacciones acceden a la red de mineros pare que estas se
registren. Los mineros, por su parte, se comunican entre sí para que sea posible
por parte de todos conocer todas las transacciones producidas. Este, pues, es el
esquema de funcionamiento, pero hacer que esta idea general funcione, no es en
absoluto trivial. Aún debe exponerse cómo lograr que este sistema:

a. Distinga cada cliente de los restantes.
#. Evite registros simultáneos que provoquen inconsistencia, o sea, colisiones.
   Por ejemplo, imaginemos que, teniendo el señor **A** 5 *bitcoins*, uno
   de los nodos registra que cede al señor **B** 4 *bitcoins* y otro nodo
   diferente, que aún no está enterado de ello, registra que cede al señor **C**,
   3 *bitcoins*.
#. Dado que en un libro de contabilidad los registros tiene un orden secuencial,
   consiga secuencialidad.
#. Evite la manipulación malintencionada de las transacciones.
#. Incentive el trabajo de los mineros.

Todo ello se resuelve mediante la **cadena de bloques**, que es lo que
describiremos a continuación.

Descripción
===========
Para implementar esta base de datos distribuida, las transacciones se agrupan en
bloques y la base de datos distribuida toma la forma de una cadena de bloques, o
sea, una secuencia ordenada de bloques en el que uno va detrás del anterior. Un
bloque, de forma muy, muy resumida, tiene el siguiente aspecto:

.. image:: files/bloque.png

esto es:

#. Una cabecera con metadatos, entre los cuales hemos querido mencionar dos: el
   :ref:`hash <hash>` del bloque que le precede en la cadena, y el |nonce|, que
   definiremos más adelante.

#. La lista de transacciones contenidas en el bloque.

Y la cadena de bloques, supuesto que ya tenga cuatro, se verá así:

.. image:: files/cadena.png

.. _crypto-tipos:

Tipos de criptomonedas
======================

.. https://www.linuxparty.es/recursos/publicidad/18-encriptacion/10714-parte-1-blockchain-en-linux-introduccion-y-criptomoneda.html
   https://www.linuxjournal.com/content/blockchain-part-i-introduction-and-cryptocurrency
   https://dev.to/ruanbekker/running-a-testnet-with-bitcoin-on-linux-4b0p
   https://www.youtube.com/watch?v=hEoYL5j0wYU

   https://www.usvotefoundation.org/blockchain-voting-is-not-a-security-strategy

.. _Bitcoin: https://es.wikipedia.org/wiki/Bitcoin
.. _Natoshi Nakamoto: https://es.wikipedia.org/wiki/Satoshi_Nakamoto
.. _bitcoin.org: https://bitcoin.org


.. |nonce| replace:: :abbr:`nonce (Number Only Used Once)`

