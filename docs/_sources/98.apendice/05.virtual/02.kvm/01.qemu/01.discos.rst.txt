.. _qemu-discos:

Gestión de discos
=================
:program:`QEmu` tiene su propio formato nativo de discos llamado |QCOW|\ 2 (el
**2** es por la versión) y ese debería ser el que se usara por eficiencia y
rendimiento. Para gestionarlo tenemos fundamentalmente una orden:
:manpage:`qemu-img`.

Creación
--------
El modo más sencillo de crear un disco es el siguiente::

   $ qemu-img create -f qcow2 disco.qcw 4G

donde el último parámetro es el tamaño del disco. El archivo, sin embargo, no
ocupará tal cantidad de disco, puesto que el disco es de tamaño dinámico e irá
creciendo según se llene con datos. La expresión del formato (|QCOW|\ 2) con la
opcion :kbd:`-f` es indispensable, porque de otra forma se creará un disco en
formato \"cruda\" (*raw*). Existen otro formatos soportados (como |VDI| de
Virtualbox), pero si nuestra intención es usar este *software* no tiene sentido
no usar el nativo. Una vez creado, podemos consultar la información sobre el
disco::

   $ qemu-img info disco.qcow2
   image: /tmp/caca.qcow2
   file format: qcow2
   virtual size: 4 GiB (4294967296 bytes)
   disk size: 196 KiB
   cluster_size: 65536
   Format specific information:
       compat: 1.1
       compression type: zlib
       lazy refcounts: false
       refcount bits: 16
       corrupt: false
       extended l2: false

Básicamente, este es el modo en que se crea un disco *ex novo*. Ahora bien, si
se quiere hacer un disco con un tamaño compatible con el antiquísimo
direccionamiento |CHS| de |BIOS|, entonces es necesario mantener la relación de
**512** *bytes* por sector, **63** sectores por pista  y **255** pistas por
cilindro; y el disco se tendrá que crear así::

   $ qemu-img create -f qcow2 disco.qcw $((x*255*63*512))B

donde "x" es un entero que debemos calcular para que el producto de todas las
cantidades sea el tamaño más aproximado al que deseamos (en nuestro ejemplo,
4GiB). Por tanto, :math:`\frac{4*1024^3}{255*63*512} \approx 523`.

.. note:: Esto es lo mínimo que necesitamos saber sobre discos para poder
   empezar a usar :program:`QEmu`. Puede ya mismo empezar a :ref:`crear máquinas
   virtuales <qemu-uso>` y regresar más tarde a este punto para conocer cómo
   pueden manipularse los discos.

Derivación
----------
Es posible también crear un disco utilizando como base otro, de manera que el
nuevo disco en vez de partir sin datos, partirá con el contenido del que se tome
como base. Eso sí, deberemos asegurarnos de que el disco base no sufre ninguna
alteración. Tiene especial utilidad si hacemos la instalación de un sistema
operativo en un disco y, a partir de ese momento, queremos tomar esta
instalación como plantilla en varias máquinas virtuales distintas.

Por ejemplo, supongamos que en el disco :file:`bullseye.qcw` hemos hecho una
instalación básica de la última *Debian* estable y queremos tomar el disco como
base para dos máquinas: una en la que instalaremos un servidor |DHCP| y otra que
usaremos como cliente para comprobar las configuraciones de la primera::

   $ chmod 440 bullseye.qcw
   $ qemu-img create -f qcow2 -F qcow2 servidor.qcw  -b bullseye.qcw
   $ qemu-img create -f qcow2 -F qcow2 cliente.qcw  -b bullseye.qcw

La primera orden impide que posteriormente por descuido arranquemos una máquina
con el disco :file:`bullseye.qcw` y que esta torpeza lo modifique y arruine los
dos discos derivados. Por otra parte debemos declarar explícitamente los
formatos del disco base (el introducido con :kbd:`-b`) y el derivado. Si echamos
un vistazo a uno de los dos discos derivados::

   $ qemu-img info servidor.qcw | grep backing
   backing file: bullseye.qcw
   backing file format: qcow2

.. warning:: Las rutas relativas (como es el caso del ejemplo) se calculan
   respecto de la ubicación del nuevo disco, no respecto del directorio de
   trabajo.

También es interesante cambiar la base de un disco derivado en algunos casos:

#. Cuando la base ha cambiado de ubicación y la definimos con una ruta relativa,
   como en el ejemplo anterior. Supongamos que tiempo después cambiamos de
   ubicación :file:`bullseye.qcw`::

      $ mkdir Plantillas
      $ mv bullseye.qcw Plantillas/

   Completado este movimiento, el disco derivado dejará de funcionar, porque
   buscará la plantilla en el directorio en que se encuentra y eso ya no es así.
   Pero puede solucionarse::

      $ qemu-img rebase -f qcow2 servidor.qcw -F qcow2 -u -b Plantillas/bullseye.qcw

   Téngase presente la opción :kbd:`-u`, que es necesaria en este caso. El
   comportamiento del subcomando :command:`rebase` es recalcular la base, pero
   en este caso, no se quiere recalcular nada, sino simplemente cambiar la
   dirección de la base.

#. Cuando queremos cambiar realmente el disco base a otro que se encuentre en la
   misma cadena de derivación. Supongamos esta situación::

      $ qemu-img info bullseye.qcw | grep backing
      $ qemu-img info servidor.qcw | grep backing
      backing file: bullseye.qcw
      backing file format: qcow2
      $ qemu-img info servidor2.qcw | grep backing
      backing file: servidor.qcw
      backing file format: qcow2

   O sea, tenemos tres discos: :file:`bullseye.qcw`, que no deriva de ninguno,
   :file:`servidor.qcw` que deriva del anterior; y file:`servidor2.qcw` que
   deriva de este último. :command:`rebase` nos permite hacer que
   :file:`servidor.qcw` pueda derivar directamente de :file:`bullseye.qcw`::

     $ qemu-img rebase -p -f qcow2  servidor2.qcw -F qcow2 -b bullseye.qcw 

   La opción :kbd:`-p` no es necesaria, pero sí muy útil, porque nos mostrará el
   porcentaje de progreso mientras dura la operación. Obviamente el disco
   :file:`servidor2.qcw` sufrirá cambios, de modo que se fusionarán en él los
   cambios que haya en este propio disco y en :file:`servidor.qcw`.

   Un caso particular es aquel en que se quiere que el disco ya no derive de
   ningún otro, para lo cual basta con indicar una base vacía::

      $ qemu-img rebase -p -f qcow2 servidor2.qcw -b ""

Instantáneas
------------

.. _qemu-discos-conv:

Conversión
----------

Montaje
-------

.. |QCOW| replace:: :abbr:`QCOW (Qemu Copy On Write)`
.. |VDI| replace:: :abbr:`VDI (Virtualbox Disk Image)`
.. |CHS| replace:: :abbr:`CHS (Cylinder-Head-Sector)`
.. |BIOS| replace:: :abbr:`BIOS (Basic I/O System)`
