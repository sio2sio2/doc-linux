Software de virtualización
==========================
De las múltiples soluciones disponibles en *Linux* incluimos guía de unas pocas
de ellas, que en algunos casos serán meras notas, y en otros relaciones más extensas.

.. _software-virt-completa:

Virtualización completa
-----------------------
Al utilizar un *software* de virtualización para instalar y probar sistemas
operativos nos será muy útil conocer varios aspectos (además de los evidentes):

* Manipular el modo en que la máquina virtual se conecta a la red para poder
  simular distintos escenarios. Por ejemplo, no es lo mismo que queramos
  virtualizar un sistema de escritorio en que lo único que se necesita por lo
  general es salida a internet que un servidor en que muy probablemente
  necesitemos que el anfitrión pueda conectarse a él.

* Preservar estados de disco para recuperarlos cuando sea preciso (lo que se
  conoce como :dfn:`instantáneas`).

* Crear discos que puedan utilizarse como plantilla para la creación de varias
  máquinas virtuales. Por ejemplo, crear un único disco con una instalación
  limpia de *Windows* 10, y usar éste como base para todos los discos de las
  máquinas virtuales en que vayamos a virtualizar un *Windows* 10.

* Virtualizar tanto *firmware* |BIOS| como *firmware* |UEFI|.

* Tener mecanismos sencillos para poder transferir datos entre el anfitrión
  y el huésped (p.e. un directorio compartido por ambos).

* Exportar máquinas virtuales a otros anfitriones o importarlas desde ellos.

Trataremos dos hipervisores: :program:`Virtualbox` porque ofrece la posibilidad
de ejecutarse en otros sistemas operativos como *Windows*, y |KVM| que es una
solución integrada oficialmente en el propio núcleo de *Linux*:

.. toctree::
   :glob:
   :maxdepth: 1

   02.software/01.completa/[0-9]*

.. _software-contenedores:

Contenedores
------------
Los contenedores son una solución infinitamente más ligera y eficiente con la
limitación de que tendrán que contener un sistema de idéntica naturaleza a la
del anfitrión, puesto que carecen de sistema operativo propio.

En los sistemas *Linux* este tipo de virtualización, muy esquemáticamente, se
basa en dos conceptos:

#. El **aislamiento** a través de:

   * los :dfn:`espacios de nombres` (*namespaces*) del núcleo, que proporcionan
     a los procesos una visión parcial de los procesos y recursos que gestiona
     el sistema operativo. Todo aquello que no haya sido incluido en el mismo
     espacio de nombres, no es accesible ni aparentemente existe. Para entender
     este conceptos resulta indispensable la lectura del artículo `Digging into
     Linux namespaces`_ (y `su segunda parte`_)\ [#]_.

   * el :dfn:`enjaulamiento` (:manpage:`chroot`, :manpage:`pivot_root`) dentro de
     un árbol de directorios, que logra su aislamiento del resto del sistema de
     archivos.

#. La **limitación** de recursos a través de los :dfn:`grupos de control`
   (abreviado *cgroups*). Gracias a ellos, por ejemplo, podremos impedir que un
   proceso ocupe más de 128MiB de memoria |RAM|, aunque la máquina disponga de
   mucha más. Para profundizar en ellos es conveniente el artículo `Cgroups
   Introduction
   <https://www.lewisgaul.co.uk/blog/coding/2022/05/13/cgroups-intro/>`_.

En consecuencia, la creación de un contenedor supone:

* Crearle un conjunto de espacios de nombres propios (uno para su red, otro para
  sus procesos, etc). De esta manera, dentro del contenedor sólo se tiene acceso
  a aquello que el sistema operativo del anfitrión gestiona para el propio
  contenedor.
* Enjaularlo dentro la porción del árbol de directorios que constituya su
  \"sistema de archivos\".
* Crearle los grupos de control propios para limitar su uso de recursos.

Antes de comenzar, no obstante, es preciso hacer una distinción entre dos tipos
de contenedores:

:dfn:`Contenedor privilegiado` (*privileged container*)
   es aquel en que no se hace uso del concepto de *espacio de nombres de
   usuario*  y, en consecuencia, los usuarios y grupos del contenedor se
   corresponden con los usuarios y grupos del anfitrión (aunque en el
   contenedor puedan no tener nombre asignado). Dicho de otro modo, la
   acción que realice el usuario *root* en el contenedor es una acción que
   el sistema operativo del anfitrión considera que está realmente ejecutando
   *root*.

:dfn:`Contenedor no privilegiado` (*unprivileged container*)
   es aquel que hace uso de tal concepto, por lo que se mapean identificadores
   de usuarios y grupos. El mapeo consiste en considerar que
   :math:`\mathit{UID}_a = \mathit{UID}_c + N`, esto es, que el usuario del
   contenedor con un determinado identificador es, en realidad, el usuario del
   anfitrión que tiene ese identificador más una cantidad fija. Otro tanto
   ocurre con los |GID| de grupos. Por ejemplo, el administrador del contenedor
   (**0**) podría ser en el anfitrión el usuario con identificador (**1000**),
   con lo que en este caso "N" valdría 1000. Esto abre la posibilidad a que un
   usuario normal sin privilegios (con identificador **1000**) gestione un
   contenedor sin restricciones (dentro de él será el administrador con
   identificador **0**).

.. note:: Todos estos conceptos se entienden muy bien si se leen con
   detenimiento las explicaciones ya recomendadas del artículo `Digging into
   Linux namespaces`_ y, en especial, `su segunda parte`_ en que se desarrolla
   el concepto de espacio de nombres de usuario (*user namespace*).

De entre las soluciones de virtualización basadas en contenedores trataremos una
de contenedores de aplicación (:program:`Docker`) y otra de contenedores de
sistema (|LXC|).

.. https://www.schutzwerk.com/en/blog/linux-container-intro/

.. toctree::
   :glob:
   :maxdepth: 1

   02.software/03.contenedores/[0-9]*

.. rubric:: Notas al pie

.. [#] Esto incluye también a usuarios y grupos, de manera que un usuario que
   dentro del contenedor actuara como usuario privilegiado (o sea, con el |UID|
   0) fuera de él podría no serlo en absoluto. El interesantísimo artículo
   mencionado ilustra `cómo crear a mano un entorno absolutamente aislado
   <https://blog.quarkslab.com/digging-into-linux-namespaces-part-2.html#combining-almost-everything>`_
   que nos puede ayudar a entender cómo funciona la *magia* de los contenedores.
   Si a ese procedimiento se le añade limitación con *cgroups* (véase `Docker
   Resource Management in Detail
   <https://tbhaxor.com/docker-resource-management-in-detail/>`_), obtendremos
   un contenedor *artesanal* sin necesidad de haber utilizado *software*
   específico como |LXC| o *Docker*.

.. |BIOS| replace:: :abbr:`BIOS (Basic I/O System)`
.. |UEFI| replace:: :abbr:`UEFI (Unified Extensible Firmware Interface)`
.. |KVM| replace:: :abbr:`KVM (Kernel-based Virtual Machine)`
.. |LXC| replace:: :abbr:`LXC (LinuX Containers)`
.. |RAM| replace:: :abbr:`RAM (Random Access Memory)`
.. |UID| replace:: :abbr:`UID (User IDentifier)`
.. |GID| replace:: :abbr:`GID (Group IDentifier)`

.. _Digging into Linux namespaces: https://blog.quarkslab.com/digging-into-linux-namespaces-part-1.html
.. _su segunda parte: https://blog.quarkslab.com/digging-into-linux-namespaces-part-2.html
