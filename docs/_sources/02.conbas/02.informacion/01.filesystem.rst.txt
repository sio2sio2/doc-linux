.. _filesystem:

El sistema de ficheros
======================

No entrando en mucho detalle, el sistema de ficheros es el encargado de
estructurar y gestionar la información almacenada en disco. Para ello, organiza
dicha información en forma de ficheros, cada uno de los cuales es una unidad
contenedora de información; y directorios, que son unidades contenedoras de
**ficheros** y **directorios**.

.. note::
   Desde la aparición de sistemas gráficos es habitual llamar a los *directorios*,
   **carpetas**.

De ahí que, si queremos almanacenar una foto, la información que compone ésta se
guarde dentro de un fichero adecuado (un ``,jpg``, por ejemplo). Otra foto
diferente se almacenará en un fichero ``.jpg`` distinto, etc. Todos estos
ficheros fotográficos, que componen un album se encontrarán dentro de un mismo
directorio, al que quizás habremos llamado :file:`Inconfesables`. Es posible que
tengamos otro album con fotos de nuestra niñez, representado por otro directorio
llamado :file:`Antiguas` y que contendrá también otra buena cantidad de ficheros
de fotos. Estos dos directorios pueden a su vez encontrarse dentro de un
directorio padre llamado :file:`Imagenes`.

Al final resultará que la información incluida en el sistema de ficheros se
organizará siguiendo una estructura arborescente en la que habrá un directorio
*raíz* que contiene algunas ficheros y un primer nivel de directorios, los cuales
a su vez contendrán ficheros y directorios y así sucesivamente.

Ahora bien, el disco duro es un dispositivo en el que podemos almacenar unos y
ceros, organizados en *bytes*, etc. Pues bien, el :dfn:`sistema de ficheros` es el
software encargado de trasladar esta realidad de ceros y unos a una estructura
arborescente de directorios y ficheros, en la que, además, los componentes (esto
es, los directorios y ficheros) puedan disponer de ciertos atributos (permisos,
propietarios, fechas de modificación, etc). Hay muchos sistemas de ficheros,
pero los más usados en *linux* son **ext4**, **brtfs** y **xfs**, en especial, el
primero, que es el formato nativo de *linux* y el recomendado. **brtfs**, por su
parte, parece ser el futuro...

Estructura
----------

Las estructura de directorios no es la misma en todos las distribuciones de
linux ni en, por supuesto, todos los linux. Existe, sin embargo, un estándar
llamado `FHS <http://www.pathname.com/fhs/>`_ (*Norma para la jerarquía del
sistema de ficheros*, por sus siglas en inglés) y que los sistemas basados en
*debian* siguen con más o menos fidelidad, ya que si echamos un vistazo al
directorio raíz de *debian* veremos que contiene los siguientes directorios::

   $ tree -dL 1 /
   /
   +-- bin
   +-- boot
   +-- dev
   +-- etc
   +-- home
   +-- lib
   +-- lib64
   +-- lost+found
   +-- media
   +-- mnt
   +-- opt
   +-- proc
   +-- root
   +-- run
   +-- sbin
   +-- srv
   +-- sys
   +-- tmp
   +-- usr
   \-- var

Esta estructura de directorios tiene una correspondencia muy cercana con la
propugnada en el :abbr:`FHS (Filesystem Hierarchy Standard)`. De hecho,
podemos comentar cada uno de los directorios presentes en *debian* indicando si
tienen o no correspondencia en el *estándar*:

+----------------+----------------------------------------------------------+
|   directorio   |                       descripción                        |
+================+==========================================================+
| /              | Nivel raíz de la jerarquía de directorios.               |
+----------------+----------------------------------------------------------+
| /bin           | Incluye los comandos más básicos del sistema accesibles  |
|                | para todos los usuarios.                                 |
+----------------+----------------------------------------------------------+
| /boot          | Almacena los ficheros que sirven para arrancar           |
|                | el sistema (archivos del gestor de arranque, núcleo,     |
|                | imagen *initrd*, etc)                                    |
+----------------+----------------------------------------------------------+
| /dev           | Contiene archivos de bloques y de caracteres, algunos    |
|                | representan el *hardware* y otros tienen significado     |
|                | especial como :file:`/dev/null`.                         |
+----------------+----------------------------------------------------------+
| /etc           | Contiene las configuraciones globales de los programas   |
|                | del sistema. Cada usuario en su perfil, podrá tener las  |
|                | suyas particulares.                                      |
+----------------+----------------------------------------------------------+
| /home          | Contiene los datos personales de los usuarios, excepto   |
|                | los del administrador, *root*.                           |
+----------------+----------------------------------------------------------+
| /lib           | Contiene las bibliotecas de los programas alojados en    |
|                | en :file:`/bin` y :file:`/sbin` y las que usa el núcleo. |
+----------------+----------------------------------------------------------+
| /media         | Contiene puntos de montaje de otros sistemas de ficheros |
|                | alojados en dispositivos desmontables (cd-rom, pinchos   |
|                | *usb*, etc.)                                             |
+----------------+----------------------------------------------------------+
| /mnt           | Sirve para montar manualmente sistemas de ficheros.      |
+----------------+----------------------------------------------------------+
| /opt           | Directorio bajo el que se instalan paquetes que no       |
|                | sean distribuidos por la propia distribución. Reproduce  |
|                | el esquema de directorios :file:`bin`, :file:`lib`,      |
|                | :file:`share`, :file:`sbin`, etc.                        |
+----------------+----------------------------------------------------------+
| /proc          | Contiene un sistema de ficheros virtual que documenta el |
|                | comportamiento del núcleo y los procesos.                |
+----------------+----------------------------------------------------------+
| /root          | Directorio personal del administrador.                   |
+----------------+----------------------------------------------------------+
| /run           | Guarda información reciente sobre los demonios que se    |
|                | ejecutan. No forma parte del estándar, porque que coloca |
|                | esta información en :file:`/var/run`. En *debian* este   |
|                | último directorio es un enlace simbólico a :file:`/run`. |
+----------------+----------------------------------------------------------+
| /sbin          | Contiene los comandos básicos propios del administrador. |
+----------------+----------------------------------------------------------+
| /srv           | Contiene los datos servidos por el sistema. Así, en      |
|                | :file:`/srv/www` pueden encontrarse los ficheros que     |
|                | sirve el servidor web o en :file:`/srv/ftp` los servidos |
|                | por el servidor ftp.                                     |
+----------------+----------------------------------------------------------+
| /sys           | Como :file:`/proc`, sistema de ficheros virtual donde se |
|                | documentan el núcleo pero de una manera más organizada.  |
+----------------+----------------------------------------------------------+
| /sys           | Como :file:`/proc`, sistema de ficheros virtual donde se |
+----------------+----------------------------------------------------------+
| /tmp           | Directorio para ficheros temporales                      |
+------+---------+----------------------------------------------------------+
| /usr |         | Segundo nivel de la jerarquía para datos de sólo         |
|      |         | lectura. Es acrónimo de **U**\ NIX **S**\ ystem          |
|      |         | **R**\ esources.                                         |
|      +---------+----------------------------------------------------------+
|      | /bin    | Comandos del sistema para todos los usuarios.            |
|      +---------+----------------------------------------------------------+
|      | /games  | Por razones históricas, se separan los juegos del resto  |
|      |         | de ejecutables. No existe en la norma.                   |
|      +---------+----------------------------------------------------------+
|      | /include| Almacena los ficheros de cabecera.                       |
|      +---------+----------------------------------------------------------+
|      | /lib    | Directorio para guardar las bibliotecas de los programas |
|      |         | que se encuentran en :file:`/usr/bin` y en               |
|      |         | :file:`/usr/sbin`.                                       |
|      +---------+----------------------------------------------------------+
|      | /local  | Tercer nivel de la jerarquía para datos **loc**\ ales    |
|      |         | instalados por el administrador. Reproduce los           |
|      |         | subdirectorios del segundo nivel (:file:`bin`,           |
|      |         | :file:`sbin`, etc.)                                      |
|      +---------+----------------------------------------------------------+
|      | /sbin   | Comandos del sistema propios del administrador.          |
|      +---------+----------------------------------------------------------+
|      | /share  | Contiene datos independientes de la arquitectura como las|
|      |         | páginas del manual o documenación en general.            |
|      +---------+----------------------------------------------------------+
|      | /src    | Contiene código fuente que puede ser compilado           |
+------+---------+----------------------------------------------------------+
| /var |         | Almacena datos variables del sistema como bases de       |
|      |         | datos, *logs*, correos electrónicos.                     |
|      +---------+----------------------------------------------------------+
|      | /cache  | Contiene los datos de caché de las aplicaciones del      |
|      |         | sistema.                                                 |
|      +---------+----------------------------------------------------------+
|      | /lib    | Contiene datos persistentes que modifican los programas  |
|      |         | como bases de datos o la información del sistema de      |
|      |         | paquetes.                                                |
|      +---------+----------------------------------------------------------+
|      | /lock   | Contiene ficheros que permite conocer si los programas   |
|      |         | están en uso.                                            |
|      +---------+----------------------------------------------------------+
|      | /log    | Contiene los archivos de *log* para monitorizar el       |
|      |         | sistema.                                                 |
|      +---------+----------------------------------------------------------+
|      | /mail   | Almacena los buzones de los usuarios.                    |
|      +---------+----------------------------------------------------------+
|      | /opt    | Almacena datos variables para las aplicaciones de        |
|      |         | :file:`opt`.                                             |
|      +---------+----------------------------------------------------------+
|      | /spool  | Almacena bandejas de tareas que aún necesitan procesarse.|
+------+---------+----------------------------------------------------------+

.. note::
   Es útil tener una idea de para qué sirve cada directorio, porque ese
   conocimiento nos permite saber por dónde tenermos que empezar a buscar algo.

Por otro lado, es común que se utilicen varios sistemas de fichero a la vez. Por
ejemplo, uno para los datos del sistema y otro para los datos de usuario; o que
en un momento determinado se acceda a los datos almacenados en una memoria
*USB*. En los sistemas *unix* existe siempre un único árbol de directorios cuya
raíz es el directorio :file:`/`. Al resto de sistemas de ficheros se accede
montándolos sobre un directorio del árbol. Los datos de usuario, por ejemplo, se
montan en :file:`/home` y los dispositivos externos se montan automáticamente
dentro de :file:`/media`.  Incluso si se accede a sistemas de ficheros remotos,
estos también se montarán sobre algún lugar del árbol.

.. _rutas:

Rutas
-----

Muy comúnmente, cuando se quiere dar una orden al sistema, hay un fichero o un
directorio implicado. En ocasiones más de uno. Ya se ha discutido cómo la
estructura de directorios es arborescente y cómo los directorios y ficheros
están incluidos dentro de otros directorios.

Por esta razón, se hace necesario un método para expresar inequívocamente sobre
qué fichero o directorio se quiere actuar. Este método consiste en indicar
dónde se encuentra el fichero en cuestión mediante la expresión de su *ruta* (o
*path*, que es el término que se usa en inglés).

Rutas absolutas
"""""""""""""""

Son aquellas en las que se indica cuál es el recorrido más corto que se debe seguir desde el directorio raiz para llegar al fichero. Por ejemplo::

   /usr/bin/bc

Es la ruta absoluta del programa :command:`bc` (una calculadora) y expresa que dicho programa se encuentra dentro del directorio :file:`bin` que se encuentra dentro del directorio :file:`usr` que se encuentra a su vez dentro del directorio :file:`/`. Para separar unos directorio de otro se usa el carácter *barra*.

Las rutas absolutas son fácilmente identificables porque empiezan siempre por una barra. Además, son únicas\ [#]_.

Rutas relativas
"""""""""""""""

Son aquellas en las que el recorrido al fichero se expresa desde el directorio de trabajo. Como podemos estar trabajando en cualquier directorio, la ruta relativa a un fichero no es única: dependiendo de dónde estemos, será una u otra.

Para confeccionar la ruta relativa nos basta con saber tres cosas:

   #. Para referirnos a un fichero o directorio que se encentra dentro del directorio de trabajo basta con escribir su nombre.
   #. El directorio actual se puede referir con un :kbd:`.` (un *punto*).
   #. El directorio padre se puede referir con un :kbd:`..` (dos *puntos*
      consecutivos).

Dado que :command:`cd` es un :index:`comando <cd>` interno de :program:`bash`
que permite cambiar de directorio de trabajo, la siguiente orden nos
permitiría ir desde nuestro directorio personal (:file:`/home/usuario`) a un
directorio :file:`.config` que estuviera dentro de él::

   $ cd .config

También habría sido posible lo siguiente::

   $ cd ./.config

Si hubiéramos querido acceder al directorio :file:`openbox` dentro de :file:`.config` deberíamos
haber hecho::

   $ cd .config/openbox

Para ir al directorio raíz, en cambio, habría bastado con esto::

   $ cd ../..

O sea, haber retrocedido dos niveles. Y para haber llegado al directorio temporal::

   $ cd ../../tmp

.. include:: /99-ejercicios/01-rutas.rst

.. rubric:: Notas al pie

.. [#] Salvo que usemos enlaces duros o simbólicos, claro.

