.. _seg-acceso:

******************
Control de accesos
******************
Vetar el acceso a personas no autorizadas garantiza que evitemos dos amenazas:

+ El vandalismo.
+ El robo de datos.

Ahora bien, el acceso puede ser de dos tipos:

+ Acceso físico.
+ Acceso lógico.

El epígrafe está dedicado al análisis del control de ambos accesos.

Acceso físico
*************

.. todo:: Tratar controles biométricos, etc...

Accesa lógico
*************
El :dfn:`acceso lógico` es el acceso a través de algún servicio que posibilita
el ingreso de un cliente externo al interior del sistema informático. El
servicio es, generalmente, un servicio de red. ya que, si no existe *acceso
físico*, no es posible acercarse al equipo.

.. note:: Tenga presente que, cuando estamos sentados frente a nuestro
   ordenador, tenemos *acceso físico* ya que nos encontramos junto a él; pero, al
   introducir usuario y (generalmente) contraseña, practicamos el acceso lógico
   a través de un servicio de autenticación que no es de red.

Hay dos procesos relacionados con el control de accesos lógico:
 
+ La autenticación.
+ La autorización.

.. _seg-auth:

Autenticación
=============
La :dfn:`autenticación` es el proceso con el que se comprueba la identidad de un
agente que desea acceder o realizar alguna operación en el sistema.

Para ella los sistemas definen un conjunto de usuarios cuya identidad se
comprueba muy a menudo mediante contraseña, aunque pueden existir otros
sistemas, cada vez más frecuentes, como la huella dactilar.

Autenticación por contraseña
----------------------------
La autenticación por contraseña es el tipo de autenticación más habitual: al
usuario se le asigna una contraseña secreta para que junto al nombre de usuario
la introduzca sobre su ingreso. Si el usuario existe y la contraseña es la
correcta, el proceso de autenticación tendrá éxito.

Para mejorar la seguridad de este tipo de autenticación suelen implementarse
varias argucias que no son incompatibles entre sí:

- Las contraseñas *nunca se almacenan en claro*, sino que el resumen generado
  por una :ref:`función de hash <hash>`, de modo que. cuando se produce un
  ingreso, a la contraseña introducida por el usuario se le aplica la misma
  función y se compara el resumen generado con el almacenado. Si coinciden es
  prácticamente seguro que se introdujo la contraseña original y, en
  consecuencia, la autenticación tiene éxito. Se obra así para que, si se
  produce un robo del fichero de contraseñas, el ladrón no tenga directamente a
  su disposición todas las contraseñas, sino que tenga que aplicar
  :ref:`técnicas de fuerza bruta <ataques-auth>` para lograr averiguar alguna.

  .. note:: Échele un vistazo al :file:`/etc/shadow` de un *Linux* cualquiera y
     compruebe cómo las contraseñas no se guardan en claro.

- Se define una *política de contraseñas* que les garantize un mínimo de
  complejidad. Hablaremos de ella a continuación.

- Modernamente se ha introdicido el concepto de *autenticación en dos pasos* que
  también trataremos más adelante.

.. _politica-contraseñas:

.. rubric:: Política de contraseñas

.. todo:: La exposición sobre política de contraseñas debe incluir las políticas
   sobre su fortaleza o su caducidad (:ref:`chage <chage>`).

.. rubric:: Autenticación en dos pasos (|2FA|)

Autenticación con claves
------------------------
Otro tipo es el que usa la autenticación mediante clave pública y privada.
Servicios como |SSH| o |VPN| pueden hacer uso de esta técnica de autenticación
que se estudió al tratar la unidad sobre :ref:`Criptografía <seg-cripto>`.

Autenticación biométrica
------------------------

Autorización
============
La :dfn:`autorización` es el proceso con el que se comprueba que un usuario
identificado tiene permiso para acceder a un recurso o realizar una acción. Hay,
fundamentalmente, tres filosofías para la concesión de autorizaciones que
reciben el nombre de :dfn:`mecanismos de control de acceso`.

.. _control-accesos:

Mecanismos de control de acceso
-------------------------------
.. _control-dac:

#. Control de accesos discrecional (|DAC|)

   Es el mecanismo más habitual en que la seguridad se basa en la identidad de
   los usuarios y en los permisos que se otorgan a éstos sobre los distintos
   objetos del sistema. En él cada objeto tiene por propietario a un usuario y
   es éste el que tiene potestad para conceder, a discreción, permisos sobre su
   propiedad al resto de los usuarios. En consecuencia, el control de la
   seguridad no está centralizado, sino que cada usuario decide sobre la
   seguridad de los objetos que le pertenecen.

   Es el mecanismo que suelen implementar de serie los sistemas operativos
   (*Windows*, *Linux*, etc.), y presentan dos aproximaciones distintas para la
   definición de estos permisos discrecionales:

   - El tradicional en los sistemas *UNIX* es el sistema |POSIX|, conocido también
     como |UGO|, que define para cada objeto del sistema de ficheros un usuario
     propietario y un grupo propietario, de suerte que se definen tres grados de
     accesibilidad (permisos) distintos: para el propietario, para los usuarios
     pertenecientes al grupo propietario y para el resto de usuarios. Esa es la
     razón de su nombre y a esta técnica dedicamos :ref:`la definición elemental
     de permisos <permusu>`.

   - Las listas de control de accesos (|ACL|) que consisten en poder definir
     para cada objeto los conjuntos de permisos para cualesquiera usuarios y
     cualesquiera grupos. Por lo general se define un conjunto de permisos por
     defecto, que serán los que tengan los usuarios que no aparezcan en la lista
     o no pertenezcan a alguno de los grupos incluidos en la lista. Este es el
     método que usa *Windows*, aunque en los sistemas *UNIX* modernos se puede
     habilitar como complemento del anterior para aquellos objetos en los que no
     sea suficiente el sistema |POSIX|, que es menos granular. Este será uno de
     los aspectos avanzados que tratemos.

#. Control de accesos obligatorio (|MAC|)

   Este mecanismo se caracteriza porque el control está centralizado. El
   mecanismo se basa en la definición de etiquetas sobre los objetos que indican
   su nivel de sensibilidad (p.e. desclasificado, restringido, confidencial,
   secreto y alto secreto) y la definición de etiquetas sobre los sujetos que
   indican su nivel de acceso, de manera que el sujeto podrá actuar sobre el
   objeto sólo si tiene un nivel de acceso superior al de la sensibilidad del
   objeto.

   Todas estas políticas de acceso se definen de forma centralizada, sin que
   ningún usuario de forma discrecional pueda conceder a otros privilegios.

   En *Linux* hay posibilidad de implementar este mecanismo de
   seguridad a través de SELinux_, que usa entre otras RedHat, o :ref:`Apparmor
   <apparmor>`, que usan SuSE, Ubuntu o Debian (a partir de su versión 10). De
   hecho, es normal que en los linux modernos, este mecanismo esté habilitado
   por defecto.

#. Control de accesos basado en roles (|RBAC|)

   En este mecanismo se predefinen una serie de roles, a cada uno de los cuales
   se le asigna una serie de privilegios. Un administrador asignará a cada
   usuario uno o varios roles, de modo que los privilegios del usuario
   dependerán de cuál sea el rol o los roles que desempeñe.

   En cierta medida, es equivalente a un modelo |DAC| con |ACL|\ s en el que se
   asignan permisos exclusivamente a grupos de usuarios, no a usuarios
   particulares.

   Aunque no sea el ejemplo de un sistema operativo, la plataforma Moodle_
   implementa un control de accesos basado en roles.
   
.. _seg-permisos-datos:

Permisos |DAC|
--------------
El control discrecional de accesos es el más comúnmente implementado en los
sistemas operativos (sin perjuicio de que se pueda complementar con algún otro
mecanismo), así que a él dedicaremos el resto del epígrafe.

|DAC| consiste en definir reglas de acceso para cada recurso y se implementa
mayoritariamente utilizando dos estrategias distintas:

- El sistemas de permisos |POSIX| (esto es, el sistema |UGO|), utilizado en los
  sistemas *UNIX* y que ya debió estudiarse en el módulo de :ref:`Sistemas
  Operativos Monopuesto <som>`.
- Las listas de control de accesos que permiten en cada recurso definir reglas
  específicas para cada usuario y grupo. *Windows* utiliza este sistema por
  defecto, lo cual implica que :ref:`debió verse en el módulo de Sistemas
  Operativos Monopuesto <dac-windows>`. En *Linux*, en cambio, es opcional y
  sólo es necesario recurrir a él cuando el sistema |POSIX|, que es más simple,
  no resulta suficiente, razón por la cual no suele incorporarse a un curso
  básico sobre este sistema operativo, como es el que se imparte en
  :ref:`Sistemas Operativos Monopuesto <som>`.

Así pues, la única tarea pendiente en este módulo es el estudio de los
:ref:`permisos ACL en Linux <acls>`.

.. include:: /guias/02.seg/99.ejercicios/021.acl.rst

.. |DAC| replace:: :abbr:`DAC (Discretionary Access Control)`
.. |UGO| replace:: :abbr:`UGO (User-Group-Others)`
.. |MAC| replace::  :abbr:`MAC (Mandatory Access Control)`
.. |RBAC| replace::  :abbr:`RBAC (Role-Based Access Control)`
.. |POSIX| replace::  :abbr:`POSIX (Portable Operating System Interface for uniX)`
.. |2FA| replace::  :abbr:`2FA (Two-Factor Autentication)`

.. _SELinux: https://es.wikipedia.org/wiki/SELinux
.. _Moodle: https://www.moodle.org
